
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Discipline
 * 
 */
export type Discipline = $Result.DefaultSelection<Prisma.$DisciplinePayload>
/**
 * Model Gym
 * 
 */
export type Gym = $Result.DefaultSelection<Prisma.$GymPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Referee
 * 
 */
export type Referee = $Result.DefaultSelection<Prisma.$RefereePayload>
/**
 * Model Athlete
 * 
 */
export type Athlete = $Result.DefaultSelection<Prisma.$AthletePayload>
/**
 * Model Score
 * 
 */
export type Score = $Result.DefaultSelection<Prisma.$ScorePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Disciplines
 * const disciplines = await prisma.discipline.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Disciplines
   * const disciplines = await prisma.discipline.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.discipline`: Exposes CRUD operations for the **Discipline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplines
    * const disciplines = await prisma.discipline.findMany()
    * ```
    */
  get discipline(): Prisma.DisciplineDelegate<ExtArgs>;

  /**
   * `prisma.gym`: Exposes CRUD operations for the **Gym** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gyms
    * const gyms = await prisma.gym.findMany()
    * ```
    */
  get gym(): Prisma.GymDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.referee`: Exposes CRUD operations for the **Referee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referees
    * const referees = await prisma.referee.findMany()
    * ```
    */
  get referee(): Prisma.RefereeDelegate<ExtArgs>;

  /**
   * `prisma.athlete`: Exposes CRUD operations for the **Athlete** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Athletes
    * const athletes = await prisma.athlete.findMany()
    * ```
    */
  get athlete(): Prisma.AthleteDelegate<ExtArgs>;

  /**
   * `prisma.score`: Exposes CRUD operations for the **Score** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scores
    * const scores = await prisma.score.findMany()
    * ```
    */
  get score(): Prisma.ScoreDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Discipline: 'Discipline',
    Gym: 'Gym',
    Event: 'Event',
    Referee: 'Referee',
    Athlete: 'Athlete',
    Score: 'Score'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "discipline" | "gym" | "event" | "referee" | "athlete" | "score"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Discipline: {
        payload: Prisma.$DisciplinePayload<ExtArgs>
        fields: Prisma.DisciplineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisciplineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisciplineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          findFirst: {
            args: Prisma.DisciplineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisciplineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          findMany: {
            args: Prisma.DisciplineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>[]
          }
          create: {
            args: Prisma.DisciplineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          createMany: {
            args: Prisma.DisciplineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DisciplineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>[]
          }
          delete: {
            args: Prisma.DisciplineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          update: {
            args: Prisma.DisciplineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          deleteMany: {
            args: Prisma.DisciplineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DisciplineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DisciplineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          aggregate: {
            args: Prisma.DisciplineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscipline>
          }
          groupBy: {
            args: Prisma.DisciplineGroupByArgs<ExtArgs>
            result: $Utils.Optional<DisciplineGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisciplineCountArgs<ExtArgs>
            result: $Utils.Optional<DisciplineCountAggregateOutputType> | number
          }
        }
      }
      Gym: {
        payload: Prisma.$GymPayload<ExtArgs>
        fields: Prisma.GymFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          findFirst: {
            args: Prisma.GymFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          findMany: {
            args: Prisma.GymFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>[]
          }
          create: {
            args: Prisma.GymCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          createMany: {
            args: Prisma.GymCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GymCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>[]
          }
          delete: {
            args: Prisma.GymDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          update: {
            args: Prisma.GymUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          deleteMany: {
            args: Prisma.GymDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GymUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GymUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          aggregate: {
            args: Prisma.GymAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGym>
          }
          groupBy: {
            args: Prisma.GymGroupByArgs<ExtArgs>
            result: $Utils.Optional<GymGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymCountArgs<ExtArgs>
            result: $Utils.Optional<GymCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Referee: {
        payload: Prisma.$RefereePayload<ExtArgs>
        fields: Prisma.RefereeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefereeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefereeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          findFirst: {
            args: Prisma.RefereeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefereeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          findMany: {
            args: Prisma.RefereeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>[]
          }
          create: {
            args: Prisma.RefereeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          createMany: {
            args: Prisma.RefereeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefereeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>[]
          }
          delete: {
            args: Prisma.RefereeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          update: {
            args: Prisma.RefereeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          deleteMany: {
            args: Prisma.RefereeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefereeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefereeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          aggregate: {
            args: Prisma.RefereeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferee>
          }
          groupBy: {
            args: Prisma.RefereeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefereeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefereeCountArgs<ExtArgs>
            result: $Utils.Optional<RefereeCountAggregateOutputType> | number
          }
        }
      }
      Athlete: {
        payload: Prisma.$AthletePayload<ExtArgs>
        fields: Prisma.AthleteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AthleteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AthleteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>
          }
          findFirst: {
            args: Prisma.AthleteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AthleteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>
          }
          findMany: {
            args: Prisma.AthleteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>[]
          }
          create: {
            args: Prisma.AthleteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>
          }
          createMany: {
            args: Prisma.AthleteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AthleteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>[]
          }
          delete: {
            args: Prisma.AthleteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>
          }
          update: {
            args: Prisma.AthleteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>
          }
          deleteMany: {
            args: Prisma.AthleteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AthleteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AthleteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AthletePayload>
          }
          aggregate: {
            args: Prisma.AthleteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAthlete>
          }
          groupBy: {
            args: Prisma.AthleteGroupByArgs<ExtArgs>
            result: $Utils.Optional<AthleteGroupByOutputType>[]
          }
          count: {
            args: Prisma.AthleteCountArgs<ExtArgs>
            result: $Utils.Optional<AthleteCountAggregateOutputType> | number
          }
        }
      }
      Score: {
        payload: Prisma.$ScorePayload<ExtArgs>
        fields: Prisma.ScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          findFirst: {
            args: Prisma.ScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          findMany: {
            args: Prisma.ScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          create: {
            args: Prisma.ScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          createMany: {
            args: Prisma.ScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          delete: {
            args: Prisma.ScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          update: {
            args: Prisma.ScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          deleteMany: {
            args: Prisma.ScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          aggregate: {
            args: Prisma.ScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScore>
          }
          groupBy: {
            args: Prisma.ScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DisciplineCountOutputType
   */

  export type DisciplineCountOutputType = {
    scores: number
    events: number
    athletes: number
  }

  export type DisciplineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scores?: boolean | DisciplineCountOutputTypeCountScoresArgs
    events?: boolean | DisciplineCountOutputTypeCountEventsArgs
    athletes?: boolean | DisciplineCountOutputTypeCountAthletesArgs
  }

  // Custom InputTypes
  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplineCountOutputType
     */
    select?: DisciplineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountAthletesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AthleteWhereInput
  }


  /**
   * Count Type GymCountOutputType
   */

  export type GymCountOutputType = {
    events: number
    referees: number
    athletes: number
  }

  export type GymCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | GymCountOutputTypeCountEventsArgs
    referees?: boolean | GymCountOutputTypeCountRefereesArgs
    athletes?: boolean | GymCountOutputTypeCountAthletesArgs
  }

  // Custom InputTypes
  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymCountOutputType
     */
    select?: GymCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountRefereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefereeWhereInput
  }

  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountAthletesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AthleteWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    disciplines: number
    referees: number
    athletes: number
    scores: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    disciplines?: boolean | EventCountOutputTypeCountDisciplinesArgs
    referees?: boolean | EventCountOutputTypeCountRefereesArgs
    athletes?: boolean | EventCountOutputTypeCountAthletesArgs
    scores?: boolean | EventCountOutputTypeCountScoresArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountDisciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplineWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountRefereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefereeWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAthletesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AthleteWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }


  /**
   * Count Type AthleteCountOutputType
   */

  export type AthleteCountOutputType = {
    disciplines: number
    scores: number
  }

  export type AthleteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    disciplines?: boolean | AthleteCountOutputTypeCountDisciplinesArgs
    scores?: boolean | AthleteCountOutputTypeCountScoresArgs
  }

  // Custom InputTypes
  /**
   * AthleteCountOutputType without action
   */
  export type AthleteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AthleteCountOutputType
     */
    select?: AthleteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AthleteCountOutputType without action
   */
  export type AthleteCountOutputTypeCountDisciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplineWhereInput
  }

  /**
   * AthleteCountOutputType without action
   */
  export type AthleteCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Discipline
   */

  export type AggregateDiscipline = {
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  export type DisciplineAvgAggregateOutputType = {
    id: number | null
  }

  export type DisciplineSumAggregateOutputType = {
    id: number | null
  }

  export type DisciplineMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type DisciplineMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type DisciplineCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type DisciplineAvgAggregateInputType = {
    id?: true
  }

  export type DisciplineSumAggregateInputType = {
    id?: true
  }

  export type DisciplineMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type DisciplineMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type DisciplineCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type DisciplineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discipline to aggregate.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplines
    **/
    _count?: true | DisciplineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplineMaxAggregateInputType
  }

  export type GetDisciplineAggregateType<T extends DisciplineAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscipline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscipline[P]>
      : GetScalarType<T[P], AggregateDiscipline[P]>
  }




  export type DisciplineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplineWhereInput
    orderBy?: DisciplineOrderByWithAggregationInput | DisciplineOrderByWithAggregationInput[]
    by: DisciplineScalarFieldEnum[] | DisciplineScalarFieldEnum
    having?: DisciplineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplineCountAggregateInputType | true
    _avg?: DisciplineAvgAggregateInputType
    _sum?: DisciplineSumAggregateInputType
    _min?: DisciplineMinAggregateInputType
    _max?: DisciplineMaxAggregateInputType
  }

  export type DisciplineGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  type GetDisciplineGroupByPayload<T extends DisciplineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisciplineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
        }
      >
    >


  export type DisciplineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    scores?: boolean | Discipline$scoresArgs<ExtArgs>
    events?: boolean | Discipline$eventsArgs<ExtArgs>
    athletes?: boolean | Discipline$athletesArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discipline"]>

  export type DisciplineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["discipline"]>

  export type DisciplineSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type DisciplineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scores?: boolean | Discipline$scoresArgs<ExtArgs>
    events?: boolean | Discipline$eventsArgs<ExtArgs>
    athletes?: boolean | Discipline$athletesArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DisciplineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DisciplinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Discipline"
    objects: {
      scores: Prisma.$ScorePayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      athletes: Prisma.$AthletePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["discipline"]>
    composites: {}
  }

  type DisciplineGetPayload<S extends boolean | null | undefined | DisciplineDefaultArgs> = $Result.GetResult<Prisma.$DisciplinePayload, S>

  type DisciplineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DisciplineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DisciplineCountAggregateInputType | true
    }

  export interface DisciplineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discipline'], meta: { name: 'Discipline' } }
    /**
     * Find zero or one Discipline that matches the filter.
     * @param {DisciplineFindUniqueArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DisciplineFindUniqueArgs>(args: SelectSubset<T, DisciplineFindUniqueArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Discipline that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DisciplineFindUniqueOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DisciplineFindUniqueOrThrowArgs>(args: SelectSubset<T, DisciplineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Discipline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DisciplineFindFirstArgs>(args?: SelectSubset<T, DisciplineFindFirstArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Discipline that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DisciplineFindFirstOrThrowArgs>(args?: SelectSubset<T, DisciplineFindFirstOrThrowArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplines
     * const disciplines = await prisma.discipline.findMany()
     * 
     * // Get first 10 Disciplines
     * const disciplines = await prisma.discipline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplineWithIdOnly = await prisma.discipline.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DisciplineFindManyArgs>(args?: SelectSubset<T, DisciplineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Discipline.
     * @param {DisciplineCreateArgs} args - Arguments to create a Discipline.
     * @example
     * // Create one Discipline
     * const Discipline = await prisma.discipline.create({
     *   data: {
     *     // ... data to create a Discipline
     *   }
     * })
     * 
     */
    create<T extends DisciplineCreateArgs>(args: SelectSubset<T, DisciplineCreateArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Disciplines.
     * @param {DisciplineCreateManyArgs} args - Arguments to create many Disciplines.
     * @example
     * // Create many Disciplines
     * const discipline = await prisma.discipline.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DisciplineCreateManyArgs>(args?: SelectSubset<T, DisciplineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Disciplines and returns the data saved in the database.
     * @param {DisciplineCreateManyAndReturnArgs} args - Arguments to create many Disciplines.
     * @example
     * // Create many Disciplines
     * const discipline = await prisma.discipline.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Disciplines and only return the `id`
     * const disciplineWithIdOnly = await prisma.discipline.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DisciplineCreateManyAndReturnArgs>(args?: SelectSubset<T, DisciplineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Discipline.
     * @param {DisciplineDeleteArgs} args - Arguments to delete one Discipline.
     * @example
     * // Delete one Discipline
     * const Discipline = await prisma.discipline.delete({
     *   where: {
     *     // ... filter to delete one Discipline
     *   }
     * })
     * 
     */
    delete<T extends DisciplineDeleteArgs>(args: SelectSubset<T, DisciplineDeleteArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Discipline.
     * @param {DisciplineUpdateArgs} args - Arguments to update one Discipline.
     * @example
     * // Update one Discipline
     * const discipline = await prisma.discipline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DisciplineUpdateArgs>(args: SelectSubset<T, DisciplineUpdateArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Disciplines.
     * @param {DisciplineDeleteManyArgs} args - Arguments to filter Disciplines to delete.
     * @example
     * // Delete a few Disciplines
     * const { count } = await prisma.discipline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DisciplineDeleteManyArgs>(args?: SelectSubset<T, DisciplineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DisciplineUpdateManyArgs>(args: SelectSubset<T, DisciplineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discipline.
     * @param {DisciplineUpsertArgs} args - Arguments to update or create a Discipline.
     * @example
     * // Update or create a Discipline
     * const discipline = await prisma.discipline.upsert({
     *   create: {
     *     // ... data to create a Discipline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discipline we want to update
     *   }
     * })
     */
    upsert<T extends DisciplineUpsertArgs>(args: SelectSubset<T, DisciplineUpsertArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineCountArgs} args - Arguments to filter Disciplines to count.
     * @example
     * // Count the number of Disciplines
     * const count = await prisma.discipline.count({
     *   where: {
     *     // ... the filter for the Disciplines we want to count
     *   }
     * })
    **/
    count<T extends DisciplineCountArgs>(
      args?: Subset<T, DisciplineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplineAggregateArgs>(args: Subset<T, DisciplineAggregateArgs>): Prisma.PrismaPromise<GetDisciplineAggregateType<T>>

    /**
     * Group by Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplineGroupByArgs['orderBy'] }
        : { orderBy?: DisciplineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Discipline model
   */
  readonly fields: DisciplineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discipline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisciplineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scores<T extends Discipline$scoresArgs<ExtArgs> = {}>(args?: Subset<T, Discipline$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Discipline$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Discipline$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    athletes<T extends Discipline$athletesArgs<ExtArgs> = {}>(args?: Subset<T, Discipline$athletesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Discipline model
   */ 
  interface DisciplineFieldRefs {
    readonly id: FieldRef<"Discipline", 'Int'>
    readonly name: FieldRef<"Discipline", 'String'>
    readonly createdAt: FieldRef<"Discipline", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Discipline findUnique
   */
  export type DisciplineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline findUniqueOrThrow
   */
  export type DisciplineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline findFirst
   */
  export type DisciplineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Discipline findFirstOrThrow
   */
  export type DisciplineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Discipline findMany
   */
  export type DisciplineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Disciplines to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Discipline create
   */
  export type DisciplineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The data needed to create a Discipline.
     */
    data: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
  }

  /**
   * Discipline createMany
   */
  export type DisciplineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Disciplines.
     */
    data: DisciplineCreateManyInput | DisciplineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discipline createManyAndReturn
   */
  export type DisciplineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Disciplines.
     */
    data: DisciplineCreateManyInput | DisciplineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discipline update
   */
  export type DisciplineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The data needed to update a Discipline.
     */
    data: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
    /**
     * Choose, which Discipline to update.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline updateMany
   */
  export type DisciplineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Disciplines.
     */
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyInput>
    /**
     * Filter which Disciplines to update
     */
    where?: DisciplineWhereInput
  }

  /**
   * Discipline upsert
   */
  export type DisciplineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The filter to search for the Discipline to update in case it exists.
     */
    where: DisciplineWhereUniqueInput
    /**
     * In case the Discipline found by the `where` argument doesn't exist, create a new Discipline with this data.
     */
    create: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
    /**
     * In case the Discipline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
  }

  /**
   * Discipline delete
   */
  export type DisciplineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter which Discipline to delete.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline deleteMany
   */
  export type DisciplineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disciplines to delete
     */
    where?: DisciplineWhereInput
  }

  /**
   * Discipline.scores
   */
  export type Discipline$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Discipline.events
   */
  export type Discipline$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Discipline.athletes
   */
  export type Discipline$athletesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    where?: AthleteWhereInput
    orderBy?: AthleteOrderByWithRelationInput | AthleteOrderByWithRelationInput[]
    cursor?: AthleteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AthleteScalarFieldEnum | AthleteScalarFieldEnum[]
  }

  /**
   * Discipline without action
   */
  export type DisciplineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
  }


  /**
   * Model Gym
   */

  export type AggregateGym = {
    _count: GymCountAggregateOutputType | null
    _avg: GymAvgAggregateOutputType | null
    _sum: GymSumAggregateOutputType | null
    _min: GymMinAggregateOutputType | null
    _max: GymMaxAggregateOutputType | null
  }

  export type GymAvgAggregateOutputType = {
    id: number | null
  }

  export type GymSumAggregateOutputType = {
    id: number | null
  }

  export type GymMinAggregateOutputType = {
    id: number | null
    name: string | null
    ownerName: string | null
    coachName: string | null
    address: string | null
    pincode: string | null
    phone: string | null
    createdAt: Date | null
  }

  export type GymMaxAggregateOutputType = {
    id: number | null
    name: string | null
    ownerName: string | null
    coachName: string | null
    address: string | null
    pincode: string | null
    phone: string | null
    createdAt: Date | null
  }

  export type GymCountAggregateOutputType = {
    id: number
    name: number
    ownerName: number
    coachName: number
    address: number
    pincode: number
    phone: number
    createdAt: number
    _all: number
  }


  export type GymAvgAggregateInputType = {
    id?: true
  }

  export type GymSumAggregateInputType = {
    id?: true
  }

  export type GymMinAggregateInputType = {
    id?: true
    name?: true
    ownerName?: true
    coachName?: true
    address?: true
    pincode?: true
    phone?: true
    createdAt?: true
  }

  export type GymMaxAggregateInputType = {
    id?: true
    name?: true
    ownerName?: true
    coachName?: true
    address?: true
    pincode?: true
    phone?: true
    createdAt?: true
  }

  export type GymCountAggregateInputType = {
    id?: true
    name?: true
    ownerName?: true
    coachName?: true
    address?: true
    pincode?: true
    phone?: true
    createdAt?: true
    _all?: true
  }

  export type GymAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gym to aggregate.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gyms
    **/
    _count?: true | GymCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymMaxAggregateInputType
  }

  export type GetGymAggregateType<T extends GymAggregateArgs> = {
        [P in keyof T & keyof AggregateGym]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGym[P]>
      : GetScalarType<T[P], AggregateGym[P]>
  }




  export type GymGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymWhereInput
    orderBy?: GymOrderByWithAggregationInput | GymOrderByWithAggregationInput[]
    by: GymScalarFieldEnum[] | GymScalarFieldEnum
    having?: GymScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymCountAggregateInputType | true
    _avg?: GymAvgAggregateInputType
    _sum?: GymSumAggregateInputType
    _min?: GymMinAggregateInputType
    _max?: GymMaxAggregateInputType
  }

  export type GymGroupByOutputType = {
    id: number
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt: Date
    _count: GymCountAggregateOutputType | null
    _avg: GymAvgAggregateOutputType | null
    _sum: GymSumAggregateOutputType | null
    _min: GymMinAggregateOutputType | null
    _max: GymMaxAggregateOutputType | null
  }

  type GetGymGroupByPayload<T extends GymGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymGroupByOutputType[P]>
            : GetScalarType<T[P], GymGroupByOutputType[P]>
        }
      >
    >


  export type GymSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerName?: boolean
    coachName?: boolean
    address?: boolean
    pincode?: boolean
    phone?: boolean
    createdAt?: boolean
    events?: boolean | Gym$eventsArgs<ExtArgs>
    referees?: boolean | Gym$refereesArgs<ExtArgs>
    athletes?: boolean | Gym$athletesArgs<ExtArgs>
    _count?: boolean | GymCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gym"]>

  export type GymSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerName?: boolean
    coachName?: boolean
    address?: boolean
    pincode?: boolean
    phone?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gym"]>

  export type GymSelectScalar = {
    id?: boolean
    name?: boolean
    ownerName?: boolean
    coachName?: boolean
    address?: boolean
    pincode?: boolean
    phone?: boolean
    createdAt?: boolean
  }

  export type GymInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Gym$eventsArgs<ExtArgs>
    referees?: boolean | Gym$refereesArgs<ExtArgs>
    athletes?: boolean | Gym$athletesArgs<ExtArgs>
    _count?: boolean | GymCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GymIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GymPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gym"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
      referees: Prisma.$RefereePayload<ExtArgs>[]
      athletes: Prisma.$AthletePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      ownerName: string
      coachName: string
      address: string
      pincode: string
      phone: string
      createdAt: Date
    }, ExtArgs["result"]["gym"]>
    composites: {}
  }

  type GymGetPayload<S extends boolean | null | undefined | GymDefaultArgs> = $Result.GetResult<Prisma.$GymPayload, S>

  type GymCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymCountAggregateInputType | true
    }

  export interface GymDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gym'], meta: { name: 'Gym' } }
    /**
     * Find zero or one Gym that matches the filter.
     * @param {GymFindUniqueArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GymFindUniqueArgs>(args: SelectSubset<T, GymFindUniqueArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Gym that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GymFindUniqueOrThrowArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GymFindUniqueOrThrowArgs>(args: SelectSubset<T, GymFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Gym that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymFindFirstArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GymFindFirstArgs>(args?: SelectSubset<T, GymFindFirstArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Gym that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymFindFirstOrThrowArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GymFindFirstOrThrowArgs>(args?: SelectSubset<T, GymFindFirstOrThrowArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Gyms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gyms
     * const gyms = await prisma.gym.findMany()
     * 
     * // Get first 10 Gyms
     * const gyms = await prisma.gym.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymWithIdOnly = await prisma.gym.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GymFindManyArgs>(args?: SelectSubset<T, GymFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Gym.
     * @param {GymCreateArgs} args - Arguments to create a Gym.
     * @example
     * // Create one Gym
     * const Gym = await prisma.gym.create({
     *   data: {
     *     // ... data to create a Gym
     *   }
     * })
     * 
     */
    create<T extends GymCreateArgs>(args: SelectSubset<T, GymCreateArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Gyms.
     * @param {GymCreateManyArgs} args - Arguments to create many Gyms.
     * @example
     * // Create many Gyms
     * const gym = await prisma.gym.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GymCreateManyArgs>(args?: SelectSubset<T, GymCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gyms and returns the data saved in the database.
     * @param {GymCreateManyAndReturnArgs} args - Arguments to create many Gyms.
     * @example
     * // Create many Gyms
     * const gym = await prisma.gym.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gyms and only return the `id`
     * const gymWithIdOnly = await prisma.gym.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GymCreateManyAndReturnArgs>(args?: SelectSubset<T, GymCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Gym.
     * @param {GymDeleteArgs} args - Arguments to delete one Gym.
     * @example
     * // Delete one Gym
     * const Gym = await prisma.gym.delete({
     *   where: {
     *     // ... filter to delete one Gym
     *   }
     * })
     * 
     */
    delete<T extends GymDeleteArgs>(args: SelectSubset<T, GymDeleteArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Gym.
     * @param {GymUpdateArgs} args - Arguments to update one Gym.
     * @example
     * // Update one Gym
     * const gym = await prisma.gym.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GymUpdateArgs>(args: SelectSubset<T, GymUpdateArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Gyms.
     * @param {GymDeleteManyArgs} args - Arguments to filter Gyms to delete.
     * @example
     * // Delete a few Gyms
     * const { count } = await prisma.gym.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GymDeleteManyArgs>(args?: SelectSubset<T, GymDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gyms
     * const gym = await prisma.gym.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GymUpdateManyArgs>(args: SelectSubset<T, GymUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gym.
     * @param {GymUpsertArgs} args - Arguments to update or create a Gym.
     * @example
     * // Update or create a Gym
     * const gym = await prisma.gym.upsert({
     *   create: {
     *     // ... data to create a Gym
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gym we want to update
     *   }
     * })
     */
    upsert<T extends GymUpsertArgs>(args: SelectSubset<T, GymUpsertArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Gyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymCountArgs} args - Arguments to filter Gyms to count.
     * @example
     * // Count the number of Gyms
     * const count = await prisma.gym.count({
     *   where: {
     *     // ... the filter for the Gyms we want to count
     *   }
     * })
    **/
    count<T extends GymCountArgs>(
      args?: Subset<T, GymCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gym.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymAggregateArgs>(args: Subset<T, GymAggregateArgs>): Prisma.PrismaPromise<GetGymAggregateType<T>>

    /**
     * Group by Gym.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymGroupByArgs['orderBy'] }
        : { orderBy?: GymGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gym model
   */
  readonly fields: GymFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gym.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Gym$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Gym$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    referees<T extends Gym$refereesArgs<ExtArgs> = {}>(args?: Subset<T, Gym$refereesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findMany"> | Null>
    athletes<T extends Gym$athletesArgs<ExtArgs> = {}>(args?: Subset<T, Gym$athletesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gym model
   */ 
  interface GymFieldRefs {
    readonly id: FieldRef<"Gym", 'Int'>
    readonly name: FieldRef<"Gym", 'String'>
    readonly ownerName: FieldRef<"Gym", 'String'>
    readonly coachName: FieldRef<"Gym", 'String'>
    readonly address: FieldRef<"Gym", 'String'>
    readonly pincode: FieldRef<"Gym", 'String'>
    readonly phone: FieldRef<"Gym", 'String'>
    readonly createdAt: FieldRef<"Gym", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Gym findUnique
   */
  export type GymFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where: GymWhereUniqueInput
  }

  /**
   * Gym findUniqueOrThrow
   */
  export type GymFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where: GymWhereUniqueInput
  }

  /**
   * Gym findFirst
   */
  export type GymFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gyms.
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gyms.
     */
    distinct?: GymScalarFieldEnum | GymScalarFieldEnum[]
  }

  /**
   * Gym findFirstOrThrow
   */
  export type GymFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gyms.
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gyms.
     */
    distinct?: GymScalarFieldEnum | GymScalarFieldEnum[]
  }

  /**
   * Gym findMany
   */
  export type GymFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gyms to fetch.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gyms.
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    distinct?: GymScalarFieldEnum | GymScalarFieldEnum[]
  }

  /**
   * Gym create
   */
  export type GymCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * The data needed to create a Gym.
     */
    data: XOR<GymCreateInput, GymUncheckedCreateInput>
  }

  /**
   * Gym createMany
   */
  export type GymCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gyms.
     */
    data: GymCreateManyInput | GymCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gym createManyAndReturn
   */
  export type GymCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Gyms.
     */
    data: GymCreateManyInput | GymCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gym update
   */
  export type GymUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * The data needed to update a Gym.
     */
    data: XOR<GymUpdateInput, GymUncheckedUpdateInput>
    /**
     * Choose, which Gym to update.
     */
    where: GymWhereUniqueInput
  }

  /**
   * Gym updateMany
   */
  export type GymUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gyms.
     */
    data: XOR<GymUpdateManyMutationInput, GymUncheckedUpdateManyInput>
    /**
     * Filter which Gyms to update
     */
    where?: GymWhereInput
  }

  /**
   * Gym upsert
   */
  export type GymUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * The filter to search for the Gym to update in case it exists.
     */
    where: GymWhereUniqueInput
    /**
     * In case the Gym found by the `where` argument doesn't exist, create a new Gym with this data.
     */
    create: XOR<GymCreateInput, GymUncheckedCreateInput>
    /**
     * In case the Gym was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymUpdateInput, GymUncheckedUpdateInput>
  }

  /**
   * Gym delete
   */
  export type GymDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter which Gym to delete.
     */
    where: GymWhereUniqueInput
  }

  /**
   * Gym deleteMany
   */
  export type GymDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gyms to delete
     */
    where?: GymWhereInput
  }

  /**
   * Gym.events
   */
  export type Gym$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Gym.referees
   */
  export type Gym$refereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    where?: RefereeWhereInput
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    cursor?: RefereeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Gym.athletes
   */
  export type Gym$athletesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    where?: AthleteWhereInput
    orderBy?: AthleteOrderByWithRelationInput | AthleteOrderByWithRelationInput[]
    cursor?: AthleteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AthleteScalarFieldEnum | AthleteScalarFieldEnum[]
  }

  /**
   * Gym without action
   */
  export type GymDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GymInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    organiserGymId: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    organiserGymId: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    date: Date | null
    time: string | null
    organiserGymId: number | null
    createdAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    date: Date | null
    time: string | null
    organiserGymId: number | null
    createdAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    name: number
    location: number
    date: number
    time: number
    organiserGymId: number
    createdAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    organiserGymId?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    organiserGymId?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    date?: true
    time?: true
    organiserGymId?: true
    createdAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    date?: true
    time?: true
    organiserGymId?: true
    createdAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    date?: true
    time?: true
    organiserGymId?: true
    createdAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    name: string
    location: string
    date: Date
    time: string
    organiserGymId: number
    createdAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    date?: boolean
    time?: boolean
    organiserGymId?: boolean
    createdAt?: boolean
    organiserGym?: boolean | GymDefaultArgs<ExtArgs>
    disciplines?: boolean | Event$disciplinesArgs<ExtArgs>
    referees?: boolean | Event$refereesArgs<ExtArgs>
    athletes?: boolean | Event$athletesArgs<ExtArgs>
    scores?: boolean | Event$scoresArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    date?: boolean
    time?: boolean
    organiserGymId?: boolean
    createdAt?: boolean
    organiserGym?: boolean | GymDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    date?: boolean
    time?: boolean
    organiserGymId?: boolean
    createdAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organiserGym?: boolean | GymDefaultArgs<ExtArgs>
    disciplines?: boolean | Event$disciplinesArgs<ExtArgs>
    referees?: boolean | Event$refereesArgs<ExtArgs>
    athletes?: boolean | Event$athletesArgs<ExtArgs>
    scores?: boolean | Event$scoresArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organiserGym?: boolean | GymDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      organiserGym: Prisma.$GymPayload<ExtArgs>
      disciplines: Prisma.$DisciplinePayload<ExtArgs>[]
      referees: Prisma.$RefereePayload<ExtArgs>[]
      athletes: Prisma.$AthletePayload<ExtArgs>[]
      scores: Prisma.$ScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      location: string
      date: Date
      time: string
      organiserGymId: number
      createdAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organiserGym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    disciplines<T extends Event$disciplinesArgs<ExtArgs> = {}>(args?: Subset<T, Event$disciplinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findMany"> | Null>
    referees<T extends Event$refereesArgs<ExtArgs> = {}>(args?: Subset<T, Event$refereesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findMany"> | Null>
    athletes<T extends Event$athletesArgs<ExtArgs> = {}>(args?: Subset<T, Event$athletesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findMany"> | Null>
    scores<T extends Event$scoresArgs<ExtArgs> = {}>(args?: Subset<T, Event$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly name: FieldRef<"Event", 'String'>
    readonly location: FieldRef<"Event", 'String'>
    readonly date: FieldRef<"Event", 'DateTime'>
    readonly time: FieldRef<"Event", 'String'>
    readonly organiserGymId: FieldRef<"Event", 'Int'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.disciplines
   */
  export type Event$disciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    where?: DisciplineWhereInput
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    cursor?: DisciplineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Event.referees
   */
  export type Event$refereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    where?: RefereeWhereInput
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    cursor?: RefereeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Event.athletes
   */
  export type Event$athletesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    where?: AthleteWhereInput
    orderBy?: AthleteOrderByWithRelationInput | AthleteOrderByWithRelationInput[]
    cursor?: AthleteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AthleteScalarFieldEnum | AthleteScalarFieldEnum[]
  }

  /**
   * Event.scores
   */
  export type Event$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Referee
   */

  export type AggregateReferee = {
    _count: RefereeCountAggregateOutputType | null
    _avg: RefereeAvgAggregateOutputType | null
    _sum: RefereeSumAggregateOutputType | null
    _min: RefereeMinAggregateOutputType | null
    _max: RefereeMaxAggregateOutputType | null
  }

  export type RefereeAvgAggregateOutputType = {
    id: number | null
    gymId: number | null
    eventId: number | null
  }

  export type RefereeSumAggregateOutputType = {
    id: number | null
    gymId: number | null
    eventId: number | null
  }

  export type RefereeMinAggregateOutputType = {
    id: number | null
    name: string | null
    gymId: number | null
    eventId: number | null
    createdAt: Date | null
  }

  export type RefereeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    gymId: number | null
    eventId: number | null
    createdAt: Date | null
  }

  export type RefereeCountAggregateOutputType = {
    id: number
    name: number
    gymId: number
    eventId: number
    createdAt: number
    _all: number
  }


  export type RefereeAvgAggregateInputType = {
    id?: true
    gymId?: true
    eventId?: true
  }

  export type RefereeSumAggregateInputType = {
    id?: true
    gymId?: true
    eventId?: true
  }

  export type RefereeMinAggregateInputType = {
    id?: true
    name?: true
    gymId?: true
    eventId?: true
    createdAt?: true
  }

  export type RefereeMaxAggregateInputType = {
    id?: true
    name?: true
    gymId?: true
    eventId?: true
    createdAt?: true
  }

  export type RefereeCountAggregateInputType = {
    id?: true
    name?: true
    gymId?: true
    eventId?: true
    createdAt?: true
    _all?: true
  }

  export type RefereeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referee to aggregate.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referees
    **/
    _count?: true | RefereeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefereeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefereeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefereeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefereeMaxAggregateInputType
  }

  export type GetRefereeAggregateType<T extends RefereeAggregateArgs> = {
        [P in keyof T & keyof AggregateReferee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferee[P]>
      : GetScalarType<T[P], AggregateReferee[P]>
  }




  export type RefereeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefereeWhereInput
    orderBy?: RefereeOrderByWithAggregationInput | RefereeOrderByWithAggregationInput[]
    by: RefereeScalarFieldEnum[] | RefereeScalarFieldEnum
    having?: RefereeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefereeCountAggregateInputType | true
    _avg?: RefereeAvgAggregateInputType
    _sum?: RefereeSumAggregateInputType
    _min?: RefereeMinAggregateInputType
    _max?: RefereeMaxAggregateInputType
  }

  export type RefereeGroupByOutputType = {
    id: number
    name: string
    gymId: number
    eventId: number
    createdAt: Date
    _count: RefereeCountAggregateOutputType | null
    _avg: RefereeAvgAggregateOutputType | null
    _sum: RefereeSumAggregateOutputType | null
    _min: RefereeMinAggregateOutputType | null
    _max: RefereeMaxAggregateOutputType | null
  }

  type GetRefereeGroupByPayload<T extends RefereeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefereeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefereeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefereeGroupByOutputType[P]>
            : GetScalarType<T[P], RefereeGroupByOutputType[P]>
        }
      >
    >


  export type RefereeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gymId?: boolean
    eventId?: boolean
    createdAt?: boolean
    gym?: boolean | GymDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referee"]>

  export type RefereeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gymId?: boolean
    eventId?: boolean
    createdAt?: boolean
    gym?: boolean | GymDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referee"]>

  export type RefereeSelectScalar = {
    id?: boolean
    name?: boolean
    gymId?: boolean
    eventId?: boolean
    createdAt?: boolean
  }

  export type RefereeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gym?: boolean | GymDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type RefereeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gym?: boolean | GymDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $RefereePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referee"
    objects: {
      gym: Prisma.$GymPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      gymId: number
      eventId: number
      createdAt: Date
    }, ExtArgs["result"]["referee"]>
    composites: {}
  }

  type RefereeGetPayload<S extends boolean | null | undefined | RefereeDefaultArgs> = $Result.GetResult<Prisma.$RefereePayload, S>

  type RefereeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefereeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefereeCountAggregateInputType | true
    }

  export interface RefereeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referee'], meta: { name: 'Referee' } }
    /**
     * Find zero or one Referee that matches the filter.
     * @param {RefereeFindUniqueArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefereeFindUniqueArgs>(args: SelectSubset<T, RefereeFindUniqueArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Referee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefereeFindUniqueOrThrowArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefereeFindUniqueOrThrowArgs>(args: SelectSubset<T, RefereeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Referee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindFirstArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefereeFindFirstArgs>(args?: SelectSubset<T, RefereeFindFirstArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Referee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindFirstOrThrowArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefereeFindFirstOrThrowArgs>(args?: SelectSubset<T, RefereeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Referees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referees
     * const referees = await prisma.referee.findMany()
     * 
     * // Get first 10 Referees
     * const referees = await prisma.referee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refereeWithIdOnly = await prisma.referee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefereeFindManyArgs>(args?: SelectSubset<T, RefereeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Referee.
     * @param {RefereeCreateArgs} args - Arguments to create a Referee.
     * @example
     * // Create one Referee
     * const Referee = await prisma.referee.create({
     *   data: {
     *     // ... data to create a Referee
     *   }
     * })
     * 
     */
    create<T extends RefereeCreateArgs>(args: SelectSubset<T, RefereeCreateArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Referees.
     * @param {RefereeCreateManyArgs} args - Arguments to create many Referees.
     * @example
     * // Create many Referees
     * const referee = await prisma.referee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefereeCreateManyArgs>(args?: SelectSubset<T, RefereeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Referees and returns the data saved in the database.
     * @param {RefereeCreateManyAndReturnArgs} args - Arguments to create many Referees.
     * @example
     * // Create many Referees
     * const referee = await prisma.referee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Referees and only return the `id`
     * const refereeWithIdOnly = await prisma.referee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefereeCreateManyAndReturnArgs>(args?: SelectSubset<T, RefereeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Referee.
     * @param {RefereeDeleteArgs} args - Arguments to delete one Referee.
     * @example
     * // Delete one Referee
     * const Referee = await prisma.referee.delete({
     *   where: {
     *     // ... filter to delete one Referee
     *   }
     * })
     * 
     */
    delete<T extends RefereeDeleteArgs>(args: SelectSubset<T, RefereeDeleteArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Referee.
     * @param {RefereeUpdateArgs} args - Arguments to update one Referee.
     * @example
     * // Update one Referee
     * const referee = await prisma.referee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefereeUpdateArgs>(args: SelectSubset<T, RefereeUpdateArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Referees.
     * @param {RefereeDeleteManyArgs} args - Arguments to filter Referees to delete.
     * @example
     * // Delete a few Referees
     * const { count } = await prisma.referee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefereeDeleteManyArgs>(args?: SelectSubset<T, RefereeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referees
     * const referee = await prisma.referee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefereeUpdateManyArgs>(args: SelectSubset<T, RefereeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Referee.
     * @param {RefereeUpsertArgs} args - Arguments to update or create a Referee.
     * @example
     * // Update or create a Referee
     * const referee = await prisma.referee.upsert({
     *   create: {
     *     // ... data to create a Referee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referee we want to update
     *   }
     * })
     */
    upsert<T extends RefereeUpsertArgs>(args: SelectSubset<T, RefereeUpsertArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Referees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeCountArgs} args - Arguments to filter Referees to count.
     * @example
     * // Count the number of Referees
     * const count = await prisma.referee.count({
     *   where: {
     *     // ... the filter for the Referees we want to count
     *   }
     * })
    **/
    count<T extends RefereeCountArgs>(
      args?: Subset<T, RefereeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefereeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefereeAggregateArgs>(args: Subset<T, RefereeAggregateArgs>): Prisma.PrismaPromise<GetRefereeAggregateType<T>>

    /**
     * Group by Referee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefereeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefereeGroupByArgs['orderBy'] }
        : { orderBy?: RefereeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefereeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefereeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referee model
   */
  readonly fields: RefereeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefereeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referee model
   */ 
  interface RefereeFieldRefs {
    readonly id: FieldRef<"Referee", 'Int'>
    readonly name: FieldRef<"Referee", 'String'>
    readonly gymId: FieldRef<"Referee", 'Int'>
    readonly eventId: FieldRef<"Referee", 'Int'>
    readonly createdAt: FieldRef<"Referee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Referee findUnique
   */
  export type RefereeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee findUniqueOrThrow
   */
  export type RefereeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee findFirst
   */
  export type RefereeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referees.
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referees.
     */
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Referee findFirstOrThrow
   */
  export type RefereeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referees.
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referees.
     */
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Referee findMany
   */
  export type RefereeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referees to fetch.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referees.
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Referee create
   */
  export type RefereeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * The data needed to create a Referee.
     */
    data: XOR<RefereeCreateInput, RefereeUncheckedCreateInput>
  }

  /**
   * Referee createMany
   */
  export type RefereeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referees.
     */
    data: RefereeCreateManyInput | RefereeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referee createManyAndReturn
   */
  export type RefereeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Referees.
     */
    data: RefereeCreateManyInput | RefereeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referee update
   */
  export type RefereeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * The data needed to update a Referee.
     */
    data: XOR<RefereeUpdateInput, RefereeUncheckedUpdateInput>
    /**
     * Choose, which Referee to update.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee updateMany
   */
  export type RefereeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referees.
     */
    data: XOR<RefereeUpdateManyMutationInput, RefereeUncheckedUpdateManyInput>
    /**
     * Filter which Referees to update
     */
    where?: RefereeWhereInput
  }

  /**
   * Referee upsert
   */
  export type RefereeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * The filter to search for the Referee to update in case it exists.
     */
    where: RefereeWhereUniqueInput
    /**
     * In case the Referee found by the `where` argument doesn't exist, create a new Referee with this data.
     */
    create: XOR<RefereeCreateInput, RefereeUncheckedCreateInput>
    /**
     * In case the Referee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefereeUpdateInput, RefereeUncheckedUpdateInput>
  }

  /**
   * Referee delete
   */
  export type RefereeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter which Referee to delete.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee deleteMany
   */
  export type RefereeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referees to delete
     */
    where?: RefereeWhereInput
  }

  /**
   * Referee without action
   */
  export type RefereeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
  }


  /**
   * Model Athlete
   */

  export type AggregateAthlete = {
    _count: AthleteCountAggregateOutputType | null
    _avg: AthleteAvgAggregateOutputType | null
    _sum: AthleteSumAggregateOutputType | null
    _min: AthleteMinAggregateOutputType | null
    _max: AthleteMaxAggregateOutputType | null
  }

  export type AthleteAvgAggregateOutputType = {
    id: number | null
    age: number | null
    weight: number | null
    eventId: number | null
    gymId: number | null
  }

  export type AthleteSumAggregateOutputType = {
    id: number | null
    age: number | null
    weight: number | null
    eventId: number | null
    gymId: number | null
  }

  export type AthleteMinAggregateOutputType = {
    id: number | null
    name: string | null
    dob: Date | null
    age: number | null
    gender: string | null
    weight: number | null
    weightCategory: string | null
    category: string | null
    aadharNumber: string | null
    mobile: string | null
    photoUrl: string | null
    aadharUrl: string | null
    eventId: number | null
    gymId: number | null
    createdAt: Date | null
  }

  export type AthleteMaxAggregateOutputType = {
    id: number | null
    name: string | null
    dob: Date | null
    age: number | null
    gender: string | null
    weight: number | null
    weightCategory: string | null
    category: string | null
    aadharNumber: string | null
    mobile: string | null
    photoUrl: string | null
    aadharUrl: string | null
    eventId: number | null
    gymId: number | null
    createdAt: Date | null
  }

  export type AthleteCountAggregateOutputType = {
    id: number
    name: number
    dob: number
    age: number
    gender: number
    weight: number
    weightCategory: number
    category: number
    aadharNumber: number
    mobile: number
    photoUrl: number
    aadharUrl: number
    eventId: number
    gymId: number
    createdAt: number
    _all: number
  }


  export type AthleteAvgAggregateInputType = {
    id?: true
    age?: true
    weight?: true
    eventId?: true
    gymId?: true
  }

  export type AthleteSumAggregateInputType = {
    id?: true
    age?: true
    weight?: true
    eventId?: true
    gymId?: true
  }

  export type AthleteMinAggregateInputType = {
    id?: true
    name?: true
    dob?: true
    age?: true
    gender?: true
    weight?: true
    weightCategory?: true
    category?: true
    aadharNumber?: true
    mobile?: true
    photoUrl?: true
    aadharUrl?: true
    eventId?: true
    gymId?: true
    createdAt?: true
  }

  export type AthleteMaxAggregateInputType = {
    id?: true
    name?: true
    dob?: true
    age?: true
    gender?: true
    weight?: true
    weightCategory?: true
    category?: true
    aadharNumber?: true
    mobile?: true
    photoUrl?: true
    aadharUrl?: true
    eventId?: true
    gymId?: true
    createdAt?: true
  }

  export type AthleteCountAggregateInputType = {
    id?: true
    name?: true
    dob?: true
    age?: true
    gender?: true
    weight?: true
    weightCategory?: true
    category?: true
    aadharNumber?: true
    mobile?: true
    photoUrl?: true
    aadharUrl?: true
    eventId?: true
    gymId?: true
    createdAt?: true
    _all?: true
  }

  export type AthleteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Athlete to aggregate.
     */
    where?: AthleteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Athletes to fetch.
     */
    orderBy?: AthleteOrderByWithRelationInput | AthleteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AthleteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Athletes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Athletes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Athletes
    **/
    _count?: true | AthleteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AthleteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AthleteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AthleteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AthleteMaxAggregateInputType
  }

  export type GetAthleteAggregateType<T extends AthleteAggregateArgs> = {
        [P in keyof T & keyof AggregateAthlete]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAthlete[P]>
      : GetScalarType<T[P], AggregateAthlete[P]>
  }




  export type AthleteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AthleteWhereInput
    orderBy?: AthleteOrderByWithAggregationInput | AthleteOrderByWithAggregationInput[]
    by: AthleteScalarFieldEnum[] | AthleteScalarFieldEnum
    having?: AthleteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AthleteCountAggregateInputType | true
    _avg?: AthleteAvgAggregateInputType
    _sum?: AthleteSumAggregateInputType
    _min?: AthleteMinAggregateInputType
    _max?: AthleteMaxAggregateInputType
  }

  export type AthleteGroupByOutputType = {
    id: number
    name: string
    dob: Date
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    eventId: number
    gymId: number
    createdAt: Date
    _count: AthleteCountAggregateOutputType | null
    _avg: AthleteAvgAggregateOutputType | null
    _sum: AthleteSumAggregateOutputType | null
    _min: AthleteMinAggregateOutputType | null
    _max: AthleteMaxAggregateOutputType | null
  }

  type GetAthleteGroupByPayload<T extends AthleteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AthleteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AthleteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AthleteGroupByOutputType[P]>
            : GetScalarType<T[P], AthleteGroupByOutputType[P]>
        }
      >
    >


  export type AthleteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dob?: boolean
    age?: boolean
    gender?: boolean
    weight?: boolean
    weightCategory?: boolean
    category?: boolean
    aadharNumber?: boolean
    mobile?: boolean
    photoUrl?: boolean
    aadharUrl?: boolean
    eventId?: boolean
    gymId?: boolean
    createdAt?: boolean
    disciplines?: boolean | Athlete$disciplinesArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    gym?: boolean | GymDefaultArgs<ExtArgs>
    scores?: boolean | Athlete$scoresArgs<ExtArgs>
    _count?: boolean | AthleteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["athlete"]>

  export type AthleteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dob?: boolean
    age?: boolean
    gender?: boolean
    weight?: boolean
    weightCategory?: boolean
    category?: boolean
    aadharNumber?: boolean
    mobile?: boolean
    photoUrl?: boolean
    aadharUrl?: boolean
    eventId?: boolean
    gymId?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    gym?: boolean | GymDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["athlete"]>

  export type AthleteSelectScalar = {
    id?: boolean
    name?: boolean
    dob?: boolean
    age?: boolean
    gender?: boolean
    weight?: boolean
    weightCategory?: boolean
    category?: boolean
    aadharNumber?: boolean
    mobile?: boolean
    photoUrl?: boolean
    aadharUrl?: boolean
    eventId?: boolean
    gymId?: boolean
    createdAt?: boolean
  }

  export type AthleteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    disciplines?: boolean | Athlete$disciplinesArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    gym?: boolean | GymDefaultArgs<ExtArgs>
    scores?: boolean | Athlete$scoresArgs<ExtArgs>
    _count?: boolean | AthleteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AthleteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    gym?: boolean | GymDefaultArgs<ExtArgs>
  }

  export type $AthletePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Athlete"
    objects: {
      disciplines: Prisma.$DisciplinePayload<ExtArgs>[]
      event: Prisma.$EventPayload<ExtArgs>
      gym: Prisma.$GymPayload<ExtArgs>
      scores: Prisma.$ScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      dob: Date
      age: number
      gender: string
      weight: number
      weightCategory: string
      category: string
      aadharNumber: string
      mobile: string
      photoUrl: string
      aadharUrl: string
      eventId: number
      gymId: number
      createdAt: Date
    }, ExtArgs["result"]["athlete"]>
    composites: {}
  }

  type AthleteGetPayload<S extends boolean | null | undefined | AthleteDefaultArgs> = $Result.GetResult<Prisma.$AthletePayload, S>

  type AthleteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AthleteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AthleteCountAggregateInputType | true
    }

  export interface AthleteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Athlete'], meta: { name: 'Athlete' } }
    /**
     * Find zero or one Athlete that matches the filter.
     * @param {AthleteFindUniqueArgs} args - Arguments to find a Athlete
     * @example
     * // Get one Athlete
     * const athlete = await prisma.athlete.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AthleteFindUniqueArgs>(args: SelectSubset<T, AthleteFindUniqueArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Athlete that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AthleteFindUniqueOrThrowArgs} args - Arguments to find a Athlete
     * @example
     * // Get one Athlete
     * const athlete = await prisma.athlete.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AthleteFindUniqueOrThrowArgs>(args: SelectSubset<T, AthleteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Athlete that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AthleteFindFirstArgs} args - Arguments to find a Athlete
     * @example
     * // Get one Athlete
     * const athlete = await prisma.athlete.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AthleteFindFirstArgs>(args?: SelectSubset<T, AthleteFindFirstArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Athlete that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AthleteFindFirstOrThrowArgs} args - Arguments to find a Athlete
     * @example
     * // Get one Athlete
     * const athlete = await prisma.athlete.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AthleteFindFirstOrThrowArgs>(args?: SelectSubset<T, AthleteFindFirstOrThrowArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Athletes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AthleteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Athletes
     * const athletes = await prisma.athlete.findMany()
     * 
     * // Get first 10 Athletes
     * const athletes = await prisma.athlete.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const athleteWithIdOnly = await prisma.athlete.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AthleteFindManyArgs>(args?: SelectSubset<T, AthleteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Athlete.
     * @param {AthleteCreateArgs} args - Arguments to create a Athlete.
     * @example
     * // Create one Athlete
     * const Athlete = await prisma.athlete.create({
     *   data: {
     *     // ... data to create a Athlete
     *   }
     * })
     * 
     */
    create<T extends AthleteCreateArgs>(args: SelectSubset<T, AthleteCreateArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Athletes.
     * @param {AthleteCreateManyArgs} args - Arguments to create many Athletes.
     * @example
     * // Create many Athletes
     * const athlete = await prisma.athlete.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AthleteCreateManyArgs>(args?: SelectSubset<T, AthleteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Athletes and returns the data saved in the database.
     * @param {AthleteCreateManyAndReturnArgs} args - Arguments to create many Athletes.
     * @example
     * // Create many Athletes
     * const athlete = await prisma.athlete.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Athletes and only return the `id`
     * const athleteWithIdOnly = await prisma.athlete.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AthleteCreateManyAndReturnArgs>(args?: SelectSubset<T, AthleteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Athlete.
     * @param {AthleteDeleteArgs} args - Arguments to delete one Athlete.
     * @example
     * // Delete one Athlete
     * const Athlete = await prisma.athlete.delete({
     *   where: {
     *     // ... filter to delete one Athlete
     *   }
     * })
     * 
     */
    delete<T extends AthleteDeleteArgs>(args: SelectSubset<T, AthleteDeleteArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Athlete.
     * @param {AthleteUpdateArgs} args - Arguments to update one Athlete.
     * @example
     * // Update one Athlete
     * const athlete = await prisma.athlete.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AthleteUpdateArgs>(args: SelectSubset<T, AthleteUpdateArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Athletes.
     * @param {AthleteDeleteManyArgs} args - Arguments to filter Athletes to delete.
     * @example
     * // Delete a few Athletes
     * const { count } = await prisma.athlete.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AthleteDeleteManyArgs>(args?: SelectSubset<T, AthleteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Athletes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AthleteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Athletes
     * const athlete = await prisma.athlete.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AthleteUpdateManyArgs>(args: SelectSubset<T, AthleteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Athlete.
     * @param {AthleteUpsertArgs} args - Arguments to update or create a Athlete.
     * @example
     * // Update or create a Athlete
     * const athlete = await prisma.athlete.upsert({
     *   create: {
     *     // ... data to create a Athlete
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Athlete we want to update
     *   }
     * })
     */
    upsert<T extends AthleteUpsertArgs>(args: SelectSubset<T, AthleteUpsertArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Athletes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AthleteCountArgs} args - Arguments to filter Athletes to count.
     * @example
     * // Count the number of Athletes
     * const count = await prisma.athlete.count({
     *   where: {
     *     // ... the filter for the Athletes we want to count
     *   }
     * })
    **/
    count<T extends AthleteCountArgs>(
      args?: Subset<T, AthleteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AthleteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Athlete.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AthleteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AthleteAggregateArgs>(args: Subset<T, AthleteAggregateArgs>): Prisma.PrismaPromise<GetAthleteAggregateType<T>>

    /**
     * Group by Athlete.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AthleteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AthleteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AthleteGroupByArgs['orderBy'] }
        : { orderBy?: AthleteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AthleteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAthleteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Athlete model
   */
  readonly fields: AthleteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Athlete.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AthleteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    disciplines<T extends Athlete$disciplinesArgs<ExtArgs> = {}>(args?: Subset<T, Athlete$disciplinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findMany"> | Null>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    gym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    scores<T extends Athlete$scoresArgs<ExtArgs> = {}>(args?: Subset<T, Athlete$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Athlete model
   */ 
  interface AthleteFieldRefs {
    readonly id: FieldRef<"Athlete", 'Int'>
    readonly name: FieldRef<"Athlete", 'String'>
    readonly dob: FieldRef<"Athlete", 'DateTime'>
    readonly age: FieldRef<"Athlete", 'Int'>
    readonly gender: FieldRef<"Athlete", 'String'>
    readonly weight: FieldRef<"Athlete", 'Float'>
    readonly weightCategory: FieldRef<"Athlete", 'String'>
    readonly category: FieldRef<"Athlete", 'String'>
    readonly aadharNumber: FieldRef<"Athlete", 'String'>
    readonly mobile: FieldRef<"Athlete", 'String'>
    readonly photoUrl: FieldRef<"Athlete", 'String'>
    readonly aadharUrl: FieldRef<"Athlete", 'String'>
    readonly eventId: FieldRef<"Athlete", 'Int'>
    readonly gymId: FieldRef<"Athlete", 'Int'>
    readonly createdAt: FieldRef<"Athlete", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Athlete findUnique
   */
  export type AthleteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * Filter, which Athlete to fetch.
     */
    where: AthleteWhereUniqueInput
  }

  /**
   * Athlete findUniqueOrThrow
   */
  export type AthleteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * Filter, which Athlete to fetch.
     */
    where: AthleteWhereUniqueInput
  }

  /**
   * Athlete findFirst
   */
  export type AthleteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * Filter, which Athlete to fetch.
     */
    where?: AthleteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Athletes to fetch.
     */
    orderBy?: AthleteOrderByWithRelationInput | AthleteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Athletes.
     */
    cursor?: AthleteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Athletes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Athletes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Athletes.
     */
    distinct?: AthleteScalarFieldEnum | AthleteScalarFieldEnum[]
  }

  /**
   * Athlete findFirstOrThrow
   */
  export type AthleteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * Filter, which Athlete to fetch.
     */
    where?: AthleteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Athletes to fetch.
     */
    orderBy?: AthleteOrderByWithRelationInput | AthleteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Athletes.
     */
    cursor?: AthleteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Athletes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Athletes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Athletes.
     */
    distinct?: AthleteScalarFieldEnum | AthleteScalarFieldEnum[]
  }

  /**
   * Athlete findMany
   */
  export type AthleteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * Filter, which Athletes to fetch.
     */
    where?: AthleteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Athletes to fetch.
     */
    orderBy?: AthleteOrderByWithRelationInput | AthleteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Athletes.
     */
    cursor?: AthleteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Athletes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Athletes.
     */
    skip?: number
    distinct?: AthleteScalarFieldEnum | AthleteScalarFieldEnum[]
  }

  /**
   * Athlete create
   */
  export type AthleteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * The data needed to create a Athlete.
     */
    data: XOR<AthleteCreateInput, AthleteUncheckedCreateInput>
  }

  /**
   * Athlete createMany
   */
  export type AthleteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Athletes.
     */
    data: AthleteCreateManyInput | AthleteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Athlete createManyAndReturn
   */
  export type AthleteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Athletes.
     */
    data: AthleteCreateManyInput | AthleteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Athlete update
   */
  export type AthleteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * The data needed to update a Athlete.
     */
    data: XOR<AthleteUpdateInput, AthleteUncheckedUpdateInput>
    /**
     * Choose, which Athlete to update.
     */
    where: AthleteWhereUniqueInput
  }

  /**
   * Athlete updateMany
   */
  export type AthleteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Athletes.
     */
    data: XOR<AthleteUpdateManyMutationInput, AthleteUncheckedUpdateManyInput>
    /**
     * Filter which Athletes to update
     */
    where?: AthleteWhereInput
  }

  /**
   * Athlete upsert
   */
  export type AthleteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * The filter to search for the Athlete to update in case it exists.
     */
    where: AthleteWhereUniqueInput
    /**
     * In case the Athlete found by the `where` argument doesn't exist, create a new Athlete with this data.
     */
    create: XOR<AthleteCreateInput, AthleteUncheckedCreateInput>
    /**
     * In case the Athlete was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AthleteUpdateInput, AthleteUncheckedUpdateInput>
  }

  /**
   * Athlete delete
   */
  export type AthleteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
    /**
     * Filter which Athlete to delete.
     */
    where: AthleteWhereUniqueInput
  }

  /**
   * Athlete deleteMany
   */
  export type AthleteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Athletes to delete
     */
    where?: AthleteWhereInput
  }

  /**
   * Athlete.disciplines
   */
  export type Athlete$disciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    where?: DisciplineWhereInput
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    cursor?: DisciplineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Athlete.scores
   */
  export type Athlete$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Athlete without action
   */
  export type AthleteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Athlete
     */
    select?: AthleteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AthleteInclude<ExtArgs> | null
  }


  /**
   * Model Score
   */

  export type AggregateScore = {
    _count: ScoreCountAggregateOutputType | null
    _avg: ScoreAvgAggregateOutputType | null
    _sum: ScoreSumAggregateOutputType | null
    _min: ScoreMinAggregateOutputType | null
    _max: ScoreMaxAggregateOutputType | null
  }

  export type ScoreAvgAggregateOutputType = {
    id: number | null
    athleteId: number | null
    disciplineId: number | null
    eventId: number | null
    trial1: number | null
    trial2: number | null
    trial3: number | null
    maxLift: number | null
  }

  export type ScoreSumAggregateOutputType = {
    id: number | null
    athleteId: number | null
    disciplineId: number | null
    eventId: number | null
    trial1: number | null
    trial2: number | null
    trial3: number | null
    maxLift: number | null
  }

  export type ScoreMinAggregateOutputType = {
    id: number | null
    athleteId: number | null
    disciplineId: number | null
    eventId: number | null
    trial1: number | null
    trial2: number | null
    trial3: number | null
    maxLift: number | null
    createdAt: Date | null
  }

  export type ScoreMaxAggregateOutputType = {
    id: number | null
    athleteId: number | null
    disciplineId: number | null
    eventId: number | null
    trial1: number | null
    trial2: number | null
    trial3: number | null
    maxLift: number | null
    createdAt: Date | null
  }

  export type ScoreCountAggregateOutputType = {
    id: number
    athleteId: number
    disciplineId: number
    eventId: number
    trial1: number
    trial2: number
    trial3: number
    maxLift: number
    createdAt: number
    _all: number
  }


  export type ScoreAvgAggregateInputType = {
    id?: true
    athleteId?: true
    disciplineId?: true
    eventId?: true
    trial1?: true
    trial2?: true
    trial3?: true
    maxLift?: true
  }

  export type ScoreSumAggregateInputType = {
    id?: true
    athleteId?: true
    disciplineId?: true
    eventId?: true
    trial1?: true
    trial2?: true
    trial3?: true
    maxLift?: true
  }

  export type ScoreMinAggregateInputType = {
    id?: true
    athleteId?: true
    disciplineId?: true
    eventId?: true
    trial1?: true
    trial2?: true
    trial3?: true
    maxLift?: true
    createdAt?: true
  }

  export type ScoreMaxAggregateInputType = {
    id?: true
    athleteId?: true
    disciplineId?: true
    eventId?: true
    trial1?: true
    trial2?: true
    trial3?: true
    maxLift?: true
    createdAt?: true
  }

  export type ScoreCountAggregateInputType = {
    id?: true
    athleteId?: true
    disciplineId?: true
    eventId?: true
    trial1?: true
    trial2?: true
    trial3?: true
    maxLift?: true
    createdAt?: true
    _all?: true
  }

  export type ScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Score to aggregate.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scores
    **/
    _count?: true | ScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreMaxAggregateInputType
  }

  export type GetScoreAggregateType<T extends ScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScore[P]>
      : GetScalarType<T[P], AggregateScore[P]>
  }




  export type ScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithAggregationInput | ScoreOrderByWithAggregationInput[]
    by: ScoreScalarFieldEnum[] | ScoreScalarFieldEnum
    having?: ScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreCountAggregateInputType | true
    _avg?: ScoreAvgAggregateInputType
    _sum?: ScoreSumAggregateInputType
    _min?: ScoreMinAggregateInputType
    _max?: ScoreMaxAggregateInputType
  }

  export type ScoreGroupByOutputType = {
    id: number
    athleteId: number
    disciplineId: number
    eventId: number
    trial1: number
    trial2: number
    trial3: number
    maxLift: number
    createdAt: Date
    _count: ScoreCountAggregateOutputType | null
    _avg: ScoreAvgAggregateOutputType | null
    _sum: ScoreSumAggregateOutputType | null
    _min: ScoreMinAggregateOutputType | null
    _max: ScoreMaxAggregateOutputType | null
  }

  type GetScoreGroupByPayload<T extends ScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreGroupByOutputType[P]>
        }
      >
    >


  export type ScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    athleteId?: boolean
    disciplineId?: boolean
    eventId?: boolean
    trial1?: boolean
    trial2?: boolean
    trial3?: boolean
    maxLift?: boolean
    createdAt?: boolean
    athlete?: boolean | AthleteDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    athleteId?: boolean
    disciplineId?: boolean
    eventId?: boolean
    trial1?: boolean
    trial2?: boolean
    trial3?: boolean
    maxLift?: boolean
    createdAt?: boolean
    athlete?: boolean | AthleteDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectScalar = {
    id?: boolean
    athleteId?: boolean
    disciplineId?: boolean
    eventId?: boolean
    trial1?: boolean
    trial2?: boolean
    trial3?: boolean
    maxLift?: boolean
    createdAt?: boolean
  }

  export type ScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    athlete?: boolean | AthleteDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type ScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    athlete?: boolean | AthleteDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $ScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Score"
    objects: {
      athlete: Prisma.$AthletePayload<ExtArgs>
      discipline: Prisma.$DisciplinePayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      athleteId: number
      disciplineId: number
      eventId: number
      trial1: number
      trial2: number
      trial3: number
      maxLift: number
      createdAt: Date
    }, ExtArgs["result"]["score"]>
    composites: {}
  }

  type ScoreGetPayload<S extends boolean | null | undefined | ScoreDefaultArgs> = $Result.GetResult<Prisma.$ScorePayload, S>

  type ScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScoreCountAggregateInputType | true
    }

  export interface ScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Score'], meta: { name: 'Score' } }
    /**
     * Find zero or one Score that matches the filter.
     * @param {ScoreFindUniqueArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreFindUniqueArgs>(args: SelectSubset<T, ScoreFindUniqueArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Score that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScoreFindUniqueOrThrowArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Score that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindFirstArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreFindFirstArgs>(args?: SelectSubset<T, ScoreFindFirstArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Score that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindFirstOrThrowArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Scores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scores
     * const scores = await prisma.score.findMany()
     * 
     * // Get first 10 Scores
     * const scores = await prisma.score.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreWithIdOnly = await prisma.score.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreFindManyArgs>(args?: SelectSubset<T, ScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Score.
     * @param {ScoreCreateArgs} args - Arguments to create a Score.
     * @example
     * // Create one Score
     * const Score = await prisma.score.create({
     *   data: {
     *     // ... data to create a Score
     *   }
     * })
     * 
     */
    create<T extends ScoreCreateArgs>(args: SelectSubset<T, ScoreCreateArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Scores.
     * @param {ScoreCreateManyArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const score = await prisma.score.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreCreateManyArgs>(args?: SelectSubset<T, ScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scores and returns the data saved in the database.
     * @param {ScoreCreateManyAndReturnArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const score = await prisma.score.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scores and only return the `id`
     * const scoreWithIdOnly = await prisma.score.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Score.
     * @param {ScoreDeleteArgs} args - Arguments to delete one Score.
     * @example
     * // Delete one Score
     * const Score = await prisma.score.delete({
     *   where: {
     *     // ... filter to delete one Score
     *   }
     * })
     * 
     */
    delete<T extends ScoreDeleteArgs>(args: SelectSubset<T, ScoreDeleteArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Score.
     * @param {ScoreUpdateArgs} args - Arguments to update one Score.
     * @example
     * // Update one Score
     * const score = await prisma.score.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreUpdateArgs>(args: SelectSubset<T, ScoreUpdateArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Scores.
     * @param {ScoreDeleteManyArgs} args - Arguments to filter Scores to delete.
     * @example
     * // Delete a few Scores
     * const { count } = await prisma.score.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreDeleteManyArgs>(args?: SelectSubset<T, ScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scores
     * const score = await prisma.score.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreUpdateManyArgs>(args: SelectSubset<T, ScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Score.
     * @param {ScoreUpsertArgs} args - Arguments to update or create a Score.
     * @example
     * // Update or create a Score
     * const score = await prisma.score.upsert({
     *   create: {
     *     // ... data to create a Score
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Score we want to update
     *   }
     * })
     */
    upsert<T extends ScoreUpsertArgs>(args: SelectSubset<T, ScoreUpsertArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCountArgs} args - Arguments to filter Scores to count.
     * @example
     * // Count the number of Scores
     * const count = await prisma.score.count({
     *   where: {
     *     // ... the filter for the Scores we want to count
     *   }
     * })
    **/
    count<T extends ScoreCountArgs>(
      args?: Subset<T, ScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreAggregateArgs>(args: Subset<T, ScoreAggregateArgs>): Prisma.PrismaPromise<GetScoreAggregateType<T>>

    /**
     * Group by Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreGroupByArgs['orderBy'] }
        : { orderBy?: ScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Score model
   */
  readonly fields: ScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Score.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    athlete<T extends AthleteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AthleteDefaultArgs<ExtArgs>>): Prisma__AthleteClient<$Result.GetResult<Prisma.$AthletePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    discipline<T extends DisciplineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplineDefaultArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Score model
   */ 
  interface ScoreFieldRefs {
    readonly id: FieldRef<"Score", 'Int'>
    readonly athleteId: FieldRef<"Score", 'Int'>
    readonly disciplineId: FieldRef<"Score", 'Int'>
    readonly eventId: FieldRef<"Score", 'Int'>
    readonly trial1: FieldRef<"Score", 'Float'>
    readonly trial2: FieldRef<"Score", 'Float'>
    readonly trial3: FieldRef<"Score", 'Float'>
    readonly maxLift: FieldRef<"Score", 'Float'>
    readonly createdAt: FieldRef<"Score", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Score findUnique
   */
  export type ScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score findUniqueOrThrow
   */
  export type ScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score findFirst
   */
  export type ScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scores.
     */
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score findFirstOrThrow
   */
  export type ScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scores.
     */
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score findMany
   */
  export type ScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Scores to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score create
   */
  export type ScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Score.
     */
    data: XOR<ScoreCreateInput, ScoreUncheckedCreateInput>
  }

  /**
   * Score createMany
   */
  export type ScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scores.
     */
    data: ScoreCreateManyInput | ScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Score createManyAndReturn
   */
  export type ScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Scores.
     */
    data: ScoreCreateManyInput | ScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Score update
   */
  export type ScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Score.
     */
    data: XOR<ScoreUpdateInput, ScoreUncheckedUpdateInput>
    /**
     * Choose, which Score to update.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score updateMany
   */
  export type ScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scores.
     */
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyInput>
    /**
     * Filter which Scores to update
     */
    where?: ScoreWhereInput
  }

  /**
   * Score upsert
   */
  export type ScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Score to update in case it exists.
     */
    where: ScoreWhereUniqueInput
    /**
     * In case the Score found by the `where` argument doesn't exist, create a new Score with this data.
     */
    create: XOR<ScoreCreateInput, ScoreUncheckedCreateInput>
    /**
     * In case the Score was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreUpdateInput, ScoreUncheckedUpdateInput>
  }

  /**
   * Score delete
   */
  export type ScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter which Score to delete.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score deleteMany
   */
  export type ScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scores to delete
     */
    where?: ScoreWhereInput
  }

  /**
   * Score without action
   */
  export type ScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DisciplineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type DisciplineScalarFieldEnum = (typeof DisciplineScalarFieldEnum)[keyof typeof DisciplineScalarFieldEnum]


  export const GymScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerName: 'ownerName',
    coachName: 'coachName',
    address: 'address',
    pincode: 'pincode',
    phone: 'phone',
    createdAt: 'createdAt'
  };

  export type GymScalarFieldEnum = (typeof GymScalarFieldEnum)[keyof typeof GymScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    date: 'date',
    time: 'time',
    organiserGymId: 'organiserGymId',
    createdAt: 'createdAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const RefereeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    gymId: 'gymId',
    eventId: 'eventId',
    createdAt: 'createdAt'
  };

  export type RefereeScalarFieldEnum = (typeof RefereeScalarFieldEnum)[keyof typeof RefereeScalarFieldEnum]


  export const AthleteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    dob: 'dob',
    age: 'age',
    gender: 'gender',
    weight: 'weight',
    weightCategory: 'weightCategory',
    category: 'category',
    aadharNumber: 'aadharNumber',
    mobile: 'mobile',
    photoUrl: 'photoUrl',
    aadharUrl: 'aadharUrl',
    eventId: 'eventId',
    gymId: 'gymId',
    createdAt: 'createdAt'
  };

  export type AthleteScalarFieldEnum = (typeof AthleteScalarFieldEnum)[keyof typeof AthleteScalarFieldEnum]


  export const ScoreScalarFieldEnum: {
    id: 'id',
    athleteId: 'athleteId',
    disciplineId: 'disciplineId',
    eventId: 'eventId',
    trial1: 'trial1',
    trial2: 'trial2',
    trial3: 'trial3',
    maxLift: 'maxLift',
    createdAt: 'createdAt'
  };

  export type ScoreScalarFieldEnum = (typeof ScoreScalarFieldEnum)[keyof typeof ScoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type DisciplineWhereInput = {
    AND?: DisciplineWhereInput | DisciplineWhereInput[]
    OR?: DisciplineWhereInput[]
    NOT?: DisciplineWhereInput | DisciplineWhereInput[]
    id?: IntFilter<"Discipline"> | number
    name?: StringFilter<"Discipline"> | string
    createdAt?: DateTimeFilter<"Discipline"> | Date | string
    scores?: ScoreListRelationFilter
    events?: EventListRelationFilter
    athletes?: AthleteListRelationFilter
  }

  export type DisciplineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    scores?: ScoreOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    athletes?: AthleteOrderByRelationAggregateInput
  }

  export type DisciplineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: DisciplineWhereInput | DisciplineWhereInput[]
    OR?: DisciplineWhereInput[]
    NOT?: DisciplineWhereInput | DisciplineWhereInput[]
    createdAt?: DateTimeFilter<"Discipline"> | Date | string
    scores?: ScoreListRelationFilter
    events?: EventListRelationFilter
    athletes?: AthleteListRelationFilter
  }, "id" | "name">

  export type DisciplineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: DisciplineCountOrderByAggregateInput
    _avg?: DisciplineAvgOrderByAggregateInput
    _max?: DisciplineMaxOrderByAggregateInput
    _min?: DisciplineMinOrderByAggregateInput
    _sum?: DisciplineSumOrderByAggregateInput
  }

  export type DisciplineScalarWhereWithAggregatesInput = {
    AND?: DisciplineScalarWhereWithAggregatesInput | DisciplineScalarWhereWithAggregatesInput[]
    OR?: DisciplineScalarWhereWithAggregatesInput[]
    NOT?: DisciplineScalarWhereWithAggregatesInput | DisciplineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Discipline"> | number
    name?: StringWithAggregatesFilter<"Discipline"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Discipline"> | Date | string
  }

  export type GymWhereInput = {
    AND?: GymWhereInput | GymWhereInput[]
    OR?: GymWhereInput[]
    NOT?: GymWhereInput | GymWhereInput[]
    id?: IntFilter<"Gym"> | number
    name?: StringFilter<"Gym"> | string
    ownerName?: StringFilter<"Gym"> | string
    coachName?: StringFilter<"Gym"> | string
    address?: StringFilter<"Gym"> | string
    pincode?: StringFilter<"Gym"> | string
    phone?: StringFilter<"Gym"> | string
    createdAt?: DateTimeFilter<"Gym"> | Date | string
    events?: EventListRelationFilter
    referees?: RefereeListRelationFilter
    athletes?: AthleteListRelationFilter
  }

  export type GymOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerName?: SortOrder
    coachName?: SortOrder
    address?: SortOrder
    pincode?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    events?: EventOrderByRelationAggregateInput
    referees?: RefereeOrderByRelationAggregateInput
    athletes?: AthleteOrderByRelationAggregateInput
  }

  export type GymWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymWhereInput | GymWhereInput[]
    OR?: GymWhereInput[]
    NOT?: GymWhereInput | GymWhereInput[]
    name?: StringFilter<"Gym"> | string
    ownerName?: StringFilter<"Gym"> | string
    coachName?: StringFilter<"Gym"> | string
    address?: StringFilter<"Gym"> | string
    pincode?: StringFilter<"Gym"> | string
    phone?: StringFilter<"Gym"> | string
    createdAt?: DateTimeFilter<"Gym"> | Date | string
    events?: EventListRelationFilter
    referees?: RefereeListRelationFilter
    athletes?: AthleteListRelationFilter
  }, "id">

  export type GymOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerName?: SortOrder
    coachName?: SortOrder
    address?: SortOrder
    pincode?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    _count?: GymCountOrderByAggregateInput
    _avg?: GymAvgOrderByAggregateInput
    _max?: GymMaxOrderByAggregateInput
    _min?: GymMinOrderByAggregateInput
    _sum?: GymSumOrderByAggregateInput
  }

  export type GymScalarWhereWithAggregatesInput = {
    AND?: GymScalarWhereWithAggregatesInput | GymScalarWhereWithAggregatesInput[]
    OR?: GymScalarWhereWithAggregatesInput[]
    NOT?: GymScalarWhereWithAggregatesInput | GymScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Gym"> | number
    name?: StringWithAggregatesFilter<"Gym"> | string
    ownerName?: StringWithAggregatesFilter<"Gym"> | string
    coachName?: StringWithAggregatesFilter<"Gym"> | string
    address?: StringWithAggregatesFilter<"Gym"> | string
    pincode?: StringWithAggregatesFilter<"Gym"> | string
    phone?: StringWithAggregatesFilter<"Gym"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Gym"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    location?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    time?: StringFilter<"Event"> | string
    organiserGymId?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    organiserGym?: XOR<GymRelationFilter, GymWhereInput>
    disciplines?: DisciplineListRelationFilter
    referees?: RefereeListRelationFilter
    athletes?: AthleteListRelationFilter
    scores?: ScoreListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    date?: SortOrder
    time?: SortOrder
    organiserGymId?: SortOrder
    createdAt?: SortOrder
    organiserGym?: GymOrderByWithRelationInput
    disciplines?: DisciplineOrderByRelationAggregateInput
    referees?: RefereeOrderByRelationAggregateInput
    athletes?: AthleteOrderByRelationAggregateInput
    scores?: ScoreOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    name?: StringFilter<"Event"> | string
    location?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    time?: StringFilter<"Event"> | string
    organiserGymId?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    organiserGym?: XOR<GymRelationFilter, GymWhereInput>
    disciplines?: DisciplineListRelationFilter
    referees?: RefereeListRelationFilter
    athletes?: AthleteListRelationFilter
    scores?: ScoreListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    date?: SortOrder
    time?: SortOrder
    organiserGymId?: SortOrder
    createdAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    name?: StringWithAggregatesFilter<"Event"> | string
    location?: StringWithAggregatesFilter<"Event"> | string
    date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    time?: StringWithAggregatesFilter<"Event"> | string
    organiserGymId?: IntWithAggregatesFilter<"Event"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type RefereeWhereInput = {
    AND?: RefereeWhereInput | RefereeWhereInput[]
    OR?: RefereeWhereInput[]
    NOT?: RefereeWhereInput | RefereeWhereInput[]
    id?: IntFilter<"Referee"> | number
    name?: StringFilter<"Referee"> | string
    gymId?: IntFilter<"Referee"> | number
    eventId?: IntFilter<"Referee"> | number
    createdAt?: DateTimeFilter<"Referee"> | Date | string
    gym?: XOR<GymRelationFilter, GymWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type RefereeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    gymId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    gym?: GymOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type RefereeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RefereeWhereInput | RefereeWhereInput[]
    OR?: RefereeWhereInput[]
    NOT?: RefereeWhereInput | RefereeWhereInput[]
    name?: StringFilter<"Referee"> | string
    gymId?: IntFilter<"Referee"> | number
    eventId?: IntFilter<"Referee"> | number
    createdAt?: DateTimeFilter<"Referee"> | Date | string
    gym?: XOR<GymRelationFilter, GymWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "id">

  export type RefereeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    gymId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    _count?: RefereeCountOrderByAggregateInput
    _avg?: RefereeAvgOrderByAggregateInput
    _max?: RefereeMaxOrderByAggregateInput
    _min?: RefereeMinOrderByAggregateInput
    _sum?: RefereeSumOrderByAggregateInput
  }

  export type RefereeScalarWhereWithAggregatesInput = {
    AND?: RefereeScalarWhereWithAggregatesInput | RefereeScalarWhereWithAggregatesInput[]
    OR?: RefereeScalarWhereWithAggregatesInput[]
    NOT?: RefereeScalarWhereWithAggregatesInput | RefereeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Referee"> | number
    name?: StringWithAggregatesFilter<"Referee"> | string
    gymId?: IntWithAggregatesFilter<"Referee"> | number
    eventId?: IntWithAggregatesFilter<"Referee"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Referee"> | Date | string
  }

  export type AthleteWhereInput = {
    AND?: AthleteWhereInput | AthleteWhereInput[]
    OR?: AthleteWhereInput[]
    NOT?: AthleteWhereInput | AthleteWhereInput[]
    id?: IntFilter<"Athlete"> | number
    name?: StringFilter<"Athlete"> | string
    dob?: DateTimeFilter<"Athlete"> | Date | string
    age?: IntFilter<"Athlete"> | number
    gender?: StringFilter<"Athlete"> | string
    weight?: FloatFilter<"Athlete"> | number
    weightCategory?: StringFilter<"Athlete"> | string
    category?: StringFilter<"Athlete"> | string
    aadharNumber?: StringFilter<"Athlete"> | string
    mobile?: StringFilter<"Athlete"> | string
    photoUrl?: StringFilter<"Athlete"> | string
    aadharUrl?: StringFilter<"Athlete"> | string
    eventId?: IntFilter<"Athlete"> | number
    gymId?: IntFilter<"Athlete"> | number
    createdAt?: DateTimeFilter<"Athlete"> | Date | string
    disciplines?: DisciplineListRelationFilter
    event?: XOR<EventRelationFilter, EventWhereInput>
    gym?: XOR<GymRelationFilter, GymWhereInput>
    scores?: ScoreListRelationFilter
  }

  export type AthleteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    weightCategory?: SortOrder
    category?: SortOrder
    aadharNumber?: SortOrder
    mobile?: SortOrder
    photoUrl?: SortOrder
    aadharUrl?: SortOrder
    eventId?: SortOrder
    gymId?: SortOrder
    createdAt?: SortOrder
    disciplines?: DisciplineOrderByRelationAggregateInput
    event?: EventOrderByWithRelationInput
    gym?: GymOrderByWithRelationInput
    scores?: ScoreOrderByRelationAggregateInput
  }

  export type AthleteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AthleteWhereInput | AthleteWhereInput[]
    OR?: AthleteWhereInput[]
    NOT?: AthleteWhereInput | AthleteWhereInput[]
    name?: StringFilter<"Athlete"> | string
    dob?: DateTimeFilter<"Athlete"> | Date | string
    age?: IntFilter<"Athlete"> | number
    gender?: StringFilter<"Athlete"> | string
    weight?: FloatFilter<"Athlete"> | number
    weightCategory?: StringFilter<"Athlete"> | string
    category?: StringFilter<"Athlete"> | string
    aadharNumber?: StringFilter<"Athlete"> | string
    mobile?: StringFilter<"Athlete"> | string
    photoUrl?: StringFilter<"Athlete"> | string
    aadharUrl?: StringFilter<"Athlete"> | string
    eventId?: IntFilter<"Athlete"> | number
    gymId?: IntFilter<"Athlete"> | number
    createdAt?: DateTimeFilter<"Athlete"> | Date | string
    disciplines?: DisciplineListRelationFilter
    event?: XOR<EventRelationFilter, EventWhereInput>
    gym?: XOR<GymRelationFilter, GymWhereInput>
    scores?: ScoreListRelationFilter
  }, "id">

  export type AthleteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    weightCategory?: SortOrder
    category?: SortOrder
    aadharNumber?: SortOrder
    mobile?: SortOrder
    photoUrl?: SortOrder
    aadharUrl?: SortOrder
    eventId?: SortOrder
    gymId?: SortOrder
    createdAt?: SortOrder
    _count?: AthleteCountOrderByAggregateInput
    _avg?: AthleteAvgOrderByAggregateInput
    _max?: AthleteMaxOrderByAggregateInput
    _min?: AthleteMinOrderByAggregateInput
    _sum?: AthleteSumOrderByAggregateInput
  }

  export type AthleteScalarWhereWithAggregatesInput = {
    AND?: AthleteScalarWhereWithAggregatesInput | AthleteScalarWhereWithAggregatesInput[]
    OR?: AthleteScalarWhereWithAggregatesInput[]
    NOT?: AthleteScalarWhereWithAggregatesInput | AthleteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Athlete"> | number
    name?: StringWithAggregatesFilter<"Athlete"> | string
    dob?: DateTimeWithAggregatesFilter<"Athlete"> | Date | string
    age?: IntWithAggregatesFilter<"Athlete"> | number
    gender?: StringWithAggregatesFilter<"Athlete"> | string
    weight?: FloatWithAggregatesFilter<"Athlete"> | number
    weightCategory?: StringWithAggregatesFilter<"Athlete"> | string
    category?: StringWithAggregatesFilter<"Athlete"> | string
    aadharNumber?: StringWithAggregatesFilter<"Athlete"> | string
    mobile?: StringWithAggregatesFilter<"Athlete"> | string
    photoUrl?: StringWithAggregatesFilter<"Athlete"> | string
    aadharUrl?: StringWithAggregatesFilter<"Athlete"> | string
    eventId?: IntWithAggregatesFilter<"Athlete"> | number
    gymId?: IntWithAggregatesFilter<"Athlete"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Athlete"> | Date | string
  }

  export type ScoreWhereInput = {
    AND?: ScoreWhereInput | ScoreWhereInput[]
    OR?: ScoreWhereInput[]
    NOT?: ScoreWhereInput | ScoreWhereInput[]
    id?: IntFilter<"Score"> | number
    athleteId?: IntFilter<"Score"> | number
    disciplineId?: IntFilter<"Score"> | number
    eventId?: IntFilter<"Score"> | number
    trial1?: FloatFilter<"Score"> | number
    trial2?: FloatFilter<"Score"> | number
    trial3?: FloatFilter<"Score"> | number
    maxLift?: FloatFilter<"Score"> | number
    createdAt?: DateTimeFilter<"Score"> | Date | string
    athlete?: XOR<AthleteRelationFilter, AthleteWhereInput>
    discipline?: XOR<DisciplineRelationFilter, DisciplineWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type ScoreOrderByWithRelationInput = {
    id?: SortOrder
    athleteId?: SortOrder
    disciplineId?: SortOrder
    eventId?: SortOrder
    trial1?: SortOrder
    trial2?: SortOrder
    trial3?: SortOrder
    maxLift?: SortOrder
    createdAt?: SortOrder
    athlete?: AthleteOrderByWithRelationInput
    discipline?: DisciplineOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type ScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScoreWhereInput | ScoreWhereInput[]
    OR?: ScoreWhereInput[]
    NOT?: ScoreWhereInput | ScoreWhereInput[]
    athleteId?: IntFilter<"Score"> | number
    disciplineId?: IntFilter<"Score"> | number
    eventId?: IntFilter<"Score"> | number
    trial1?: FloatFilter<"Score"> | number
    trial2?: FloatFilter<"Score"> | number
    trial3?: FloatFilter<"Score"> | number
    maxLift?: FloatFilter<"Score"> | number
    createdAt?: DateTimeFilter<"Score"> | Date | string
    athlete?: XOR<AthleteRelationFilter, AthleteWhereInput>
    discipline?: XOR<DisciplineRelationFilter, DisciplineWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "id">

  export type ScoreOrderByWithAggregationInput = {
    id?: SortOrder
    athleteId?: SortOrder
    disciplineId?: SortOrder
    eventId?: SortOrder
    trial1?: SortOrder
    trial2?: SortOrder
    trial3?: SortOrder
    maxLift?: SortOrder
    createdAt?: SortOrder
    _count?: ScoreCountOrderByAggregateInput
    _avg?: ScoreAvgOrderByAggregateInput
    _max?: ScoreMaxOrderByAggregateInput
    _min?: ScoreMinOrderByAggregateInput
    _sum?: ScoreSumOrderByAggregateInput
  }

  export type ScoreScalarWhereWithAggregatesInput = {
    AND?: ScoreScalarWhereWithAggregatesInput | ScoreScalarWhereWithAggregatesInput[]
    OR?: ScoreScalarWhereWithAggregatesInput[]
    NOT?: ScoreScalarWhereWithAggregatesInput | ScoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Score"> | number
    athleteId?: IntWithAggregatesFilter<"Score"> | number
    disciplineId?: IntWithAggregatesFilter<"Score"> | number
    eventId?: IntWithAggregatesFilter<"Score"> | number
    trial1?: FloatWithAggregatesFilter<"Score"> | number
    trial2?: FloatWithAggregatesFilter<"Score"> | number
    trial3?: FloatWithAggregatesFilter<"Score"> | number
    maxLift?: FloatWithAggregatesFilter<"Score"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Score"> | Date | string
  }

  export type DisciplineCreateInput = {
    name: string
    createdAt?: Date | string
    scores?: ScoreCreateNestedManyWithoutDisciplineInput
    events?: EventCreateNestedManyWithoutDisciplinesInput
    athletes?: AthleteCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutDisciplineInput
    events?: EventUncheckedCreateNestedManyWithoutDisciplinesInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUpdateManyWithoutDisciplineNestedInput
    events?: EventUpdateManyWithoutDisciplinesNestedInput
    athletes?: AthleteUpdateManyWithoutDisciplinesNestedInput
  }

  export type DisciplineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutDisciplineNestedInput
    events?: EventUncheckedUpdateManyWithoutDisciplinesNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutDisciplinesNestedInput
  }

  export type DisciplineCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type DisciplineUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisciplineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymCreateInput = {
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutOrganiserGymInput
    referees?: RefereeCreateNestedManyWithoutGymInput
    athletes?: AthleteCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateInput = {
    id?: number
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutOrganiserGymInput
    referees?: RefereeUncheckedCreateNestedManyWithoutGymInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutOrganiserGymNestedInput
    referees?: RefereeUpdateManyWithoutGymNestedInput
    athletes?: AthleteUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutOrganiserGymNestedInput
    referees?: RefereeUncheckedUpdateManyWithoutGymNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutGymNestedInput
  }

  export type GymCreateManyInput = {
    id?: number
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
  }

  export type GymUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
    organiserGym: GymCreateNestedOneWithoutEventsInput
    disciplines?: DisciplineCreateNestedManyWithoutEventsInput
    referees?: RefereeCreateNestedManyWithoutEventInput
    athletes?: AthleteCreateNestedManyWithoutEventInput
    scores?: ScoreCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    organiserGymId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutEventsInput
    referees?: RefereeUncheckedCreateNestedManyWithoutEventInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutEventInput
    scores?: ScoreUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organiserGym?: GymUpdateOneRequiredWithoutEventsNestedInput
    disciplines?: DisciplineUpdateManyWithoutEventsNestedInput
    referees?: RefereeUpdateManyWithoutEventNestedInput
    athletes?: AthleteUpdateManyWithoutEventNestedInput
    scores?: ScoreUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    organiserGymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutEventsNestedInput
    referees?: RefereeUncheckedUpdateManyWithoutEventNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutEventNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    organiserGymId: number
    createdAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    organiserGymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeCreateInput = {
    name: string
    createdAt?: Date | string
    gym: GymCreateNestedOneWithoutRefereesInput
    event: EventCreateNestedOneWithoutRefereesInput
  }

  export type RefereeUncheckedCreateInput = {
    id?: number
    name: string
    gymId: number
    eventId: number
    createdAt?: Date | string
  }

  export type RefereeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gym?: GymUpdateOneRequiredWithoutRefereesNestedInput
    event?: EventUpdateOneRequiredWithoutRefereesNestedInput
  }

  export type RefereeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gymId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeCreateManyInput = {
    id?: number
    name: string
    gymId: number
    eventId: number
    createdAt?: Date | string
  }

  export type RefereeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gymId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AthleteCreateInput = {
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    createdAt?: Date | string
    disciplines?: DisciplineCreateNestedManyWithoutAthletesInput
    event: EventCreateNestedOneWithoutAthletesInput
    gym: GymCreateNestedOneWithoutAthletesInput
    scores?: ScoreCreateNestedManyWithoutAthleteInput
  }

  export type AthleteUncheckedCreateInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    eventId: number
    gymId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutAthletesInput
    scores?: ScoreUncheckedCreateNestedManyWithoutAthleteInput
  }

  export type AthleteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUpdateManyWithoutAthletesNestedInput
    event?: EventUpdateOneRequiredWithoutAthletesNestedInput
    gym?: GymUpdateOneRequiredWithoutAthletesNestedInput
    scores?: ScoreUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutAthletesNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteCreateManyInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    eventId: number
    gymId: number
    createdAt?: Date | string
  }

  export type AthleteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AthleteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCreateInput = {
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
    athlete: AthleteCreateNestedOneWithoutScoresInput
    discipline: DisciplineCreateNestedOneWithoutScoresInput
    event: EventCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateInput = {
    id?: number
    athleteId: number
    disciplineId: number
    eventId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type ScoreUpdateInput = {
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    athlete?: AthleteUpdateOneRequiredWithoutScoresNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutScoresNestedInput
    event?: EventUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    athleteId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCreateManyInput = {
    id?: number
    athleteId: number
    disciplineId: number
    eventId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type ScoreUpdateManyMutationInput = {
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    athleteId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ScoreListRelationFilter = {
    every?: ScoreWhereInput
    some?: ScoreWhereInput
    none?: ScoreWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type AthleteListRelationFilter = {
    every?: AthleteWhereInput
    some?: AthleteWhereInput
    none?: AthleteWhereInput
  }

  export type ScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AthleteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisciplineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type DisciplineAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DisciplineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type DisciplineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type DisciplineSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RefereeListRelationFilter = {
    every?: RefereeWhereInput
    some?: RefereeWhereInput
    none?: RefereeWhereInput
  }

  export type RefereeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerName?: SortOrder
    coachName?: SortOrder
    address?: SortOrder
    pincode?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type GymAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GymMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerName?: SortOrder
    coachName?: SortOrder
    address?: SortOrder
    pincode?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type GymMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerName?: SortOrder
    coachName?: SortOrder
    address?: SortOrder
    pincode?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type GymSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GymRelationFilter = {
    is?: GymWhereInput
    isNot?: GymWhereInput
  }

  export type DisciplineListRelationFilter = {
    every?: DisciplineWhereInput
    some?: DisciplineWhereInput
    none?: DisciplineWhereInput
  }

  export type DisciplineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    date?: SortOrder
    time?: SortOrder
    organiserGymId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
    organiserGymId?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    date?: SortOrder
    time?: SortOrder
    organiserGymId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    date?: SortOrder
    time?: SortOrder
    organiserGymId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
    organiserGymId?: SortOrder
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type RefereeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gymId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type RefereeAvgOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    eventId?: SortOrder
  }

  export type RefereeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gymId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type RefereeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gymId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type RefereeSumOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    eventId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type AthleteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    weightCategory?: SortOrder
    category?: SortOrder
    aadharNumber?: SortOrder
    mobile?: SortOrder
    photoUrl?: SortOrder
    aadharUrl?: SortOrder
    eventId?: SortOrder
    gymId?: SortOrder
    createdAt?: SortOrder
  }

  export type AthleteAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    eventId?: SortOrder
    gymId?: SortOrder
  }

  export type AthleteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    weightCategory?: SortOrder
    category?: SortOrder
    aadharNumber?: SortOrder
    mobile?: SortOrder
    photoUrl?: SortOrder
    aadharUrl?: SortOrder
    eventId?: SortOrder
    gymId?: SortOrder
    createdAt?: SortOrder
  }

  export type AthleteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    weightCategory?: SortOrder
    category?: SortOrder
    aadharNumber?: SortOrder
    mobile?: SortOrder
    photoUrl?: SortOrder
    aadharUrl?: SortOrder
    eventId?: SortOrder
    gymId?: SortOrder
    createdAt?: SortOrder
  }

  export type AthleteSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    eventId?: SortOrder
    gymId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AthleteRelationFilter = {
    is?: AthleteWhereInput
    isNot?: AthleteWhereInput
  }

  export type DisciplineRelationFilter = {
    is?: DisciplineWhereInput
    isNot?: DisciplineWhereInput
  }

  export type ScoreCountOrderByAggregateInput = {
    id?: SortOrder
    athleteId?: SortOrder
    disciplineId?: SortOrder
    eventId?: SortOrder
    trial1?: SortOrder
    trial2?: SortOrder
    trial3?: SortOrder
    maxLift?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreAvgOrderByAggregateInput = {
    id?: SortOrder
    athleteId?: SortOrder
    disciplineId?: SortOrder
    eventId?: SortOrder
    trial1?: SortOrder
    trial2?: SortOrder
    trial3?: SortOrder
    maxLift?: SortOrder
  }

  export type ScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    athleteId?: SortOrder
    disciplineId?: SortOrder
    eventId?: SortOrder
    trial1?: SortOrder
    trial2?: SortOrder
    trial3?: SortOrder
    maxLift?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreMinOrderByAggregateInput = {
    id?: SortOrder
    athleteId?: SortOrder
    disciplineId?: SortOrder
    eventId?: SortOrder
    trial1?: SortOrder
    trial2?: SortOrder
    trial3?: SortOrder
    maxLift?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreSumOrderByAggregateInput = {
    id?: SortOrder
    athleteId?: SortOrder
    disciplineId?: SortOrder
    eventId?: SortOrder
    trial1?: SortOrder
    trial2?: SortOrder
    trial3?: SortOrder
    maxLift?: SortOrder
  }

  export type ScoreCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<ScoreCreateWithoutDisciplineInput, ScoreUncheckedCreateWithoutDisciplineInput> | ScoreCreateWithoutDisciplineInput[] | ScoreUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutDisciplineInput | ScoreCreateOrConnectWithoutDisciplineInput[]
    createMany?: ScoreCreateManyDisciplineInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutDisciplinesInput = {
    create?: XOR<EventCreateWithoutDisciplinesInput, EventUncheckedCreateWithoutDisciplinesInput> | EventCreateWithoutDisciplinesInput[] | EventUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutDisciplinesInput | EventCreateOrConnectWithoutDisciplinesInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AthleteCreateNestedManyWithoutDisciplinesInput = {
    create?: XOR<AthleteCreateWithoutDisciplinesInput, AthleteUncheckedCreateWithoutDisciplinesInput> | AthleteCreateWithoutDisciplinesInput[] | AthleteUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutDisciplinesInput | AthleteCreateOrConnectWithoutDisciplinesInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<ScoreCreateWithoutDisciplineInput, ScoreUncheckedCreateWithoutDisciplineInput> | ScoreCreateWithoutDisciplineInput[] | ScoreUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutDisciplineInput | ScoreCreateOrConnectWithoutDisciplineInput[]
    createMany?: ScoreCreateManyDisciplineInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutDisciplinesInput = {
    create?: XOR<EventCreateWithoutDisciplinesInput, EventUncheckedCreateWithoutDisciplinesInput> | EventCreateWithoutDisciplinesInput[] | EventUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutDisciplinesInput | EventCreateOrConnectWithoutDisciplinesInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AthleteUncheckedCreateNestedManyWithoutDisciplinesInput = {
    create?: XOR<AthleteCreateWithoutDisciplinesInput, AthleteUncheckedCreateWithoutDisciplinesInput> | AthleteCreateWithoutDisciplinesInput[] | AthleteUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutDisciplinesInput | AthleteCreateOrConnectWithoutDisciplinesInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ScoreUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<ScoreCreateWithoutDisciplineInput, ScoreUncheckedCreateWithoutDisciplineInput> | ScoreCreateWithoutDisciplineInput[] | ScoreUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutDisciplineInput | ScoreCreateOrConnectWithoutDisciplineInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutDisciplineInput | ScoreUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: ScoreCreateManyDisciplineInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutDisciplineInput | ScoreUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutDisciplineInput | ScoreUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type EventUpdateManyWithoutDisciplinesNestedInput = {
    create?: XOR<EventCreateWithoutDisciplinesInput, EventUncheckedCreateWithoutDisciplinesInput> | EventCreateWithoutDisciplinesInput[] | EventUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutDisciplinesInput | EventCreateOrConnectWithoutDisciplinesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutDisciplinesInput | EventUpsertWithWhereUniqueWithoutDisciplinesInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutDisciplinesInput | EventUpdateWithWhereUniqueWithoutDisciplinesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutDisciplinesInput | EventUpdateManyWithWhereWithoutDisciplinesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AthleteUpdateManyWithoutDisciplinesNestedInput = {
    create?: XOR<AthleteCreateWithoutDisciplinesInput, AthleteUncheckedCreateWithoutDisciplinesInput> | AthleteCreateWithoutDisciplinesInput[] | AthleteUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutDisciplinesInput | AthleteCreateOrConnectWithoutDisciplinesInput[]
    upsert?: AthleteUpsertWithWhereUniqueWithoutDisciplinesInput | AthleteUpsertWithWhereUniqueWithoutDisciplinesInput[]
    set?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    disconnect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    delete?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    update?: AthleteUpdateWithWhereUniqueWithoutDisciplinesInput | AthleteUpdateWithWhereUniqueWithoutDisciplinesInput[]
    updateMany?: AthleteUpdateManyWithWhereWithoutDisciplinesInput | AthleteUpdateManyWithWhereWithoutDisciplinesInput[]
    deleteMany?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ScoreUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<ScoreCreateWithoutDisciplineInput, ScoreUncheckedCreateWithoutDisciplineInput> | ScoreCreateWithoutDisciplineInput[] | ScoreUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutDisciplineInput | ScoreCreateOrConnectWithoutDisciplineInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutDisciplineInput | ScoreUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: ScoreCreateManyDisciplineInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutDisciplineInput | ScoreUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutDisciplineInput | ScoreUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutDisciplinesNestedInput = {
    create?: XOR<EventCreateWithoutDisciplinesInput, EventUncheckedCreateWithoutDisciplinesInput> | EventCreateWithoutDisciplinesInput[] | EventUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutDisciplinesInput | EventCreateOrConnectWithoutDisciplinesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutDisciplinesInput | EventUpsertWithWhereUniqueWithoutDisciplinesInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutDisciplinesInput | EventUpdateWithWhereUniqueWithoutDisciplinesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutDisciplinesInput | EventUpdateManyWithWhereWithoutDisciplinesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AthleteUncheckedUpdateManyWithoutDisciplinesNestedInput = {
    create?: XOR<AthleteCreateWithoutDisciplinesInput, AthleteUncheckedCreateWithoutDisciplinesInput> | AthleteCreateWithoutDisciplinesInput[] | AthleteUncheckedCreateWithoutDisciplinesInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutDisciplinesInput | AthleteCreateOrConnectWithoutDisciplinesInput[]
    upsert?: AthleteUpsertWithWhereUniqueWithoutDisciplinesInput | AthleteUpsertWithWhereUniqueWithoutDisciplinesInput[]
    set?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    disconnect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    delete?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    update?: AthleteUpdateWithWhereUniqueWithoutDisciplinesInput | AthleteUpdateWithWhereUniqueWithoutDisciplinesInput[]
    updateMany?: AthleteUpdateManyWithWhereWithoutDisciplinesInput | AthleteUpdateManyWithWhereWithoutDisciplinesInput[]
    deleteMany?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutOrganiserGymInput = {
    create?: XOR<EventCreateWithoutOrganiserGymInput, EventUncheckedCreateWithoutOrganiserGymInput> | EventCreateWithoutOrganiserGymInput[] | EventUncheckedCreateWithoutOrganiserGymInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganiserGymInput | EventCreateOrConnectWithoutOrganiserGymInput[]
    createMany?: EventCreateManyOrganiserGymInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type RefereeCreateNestedManyWithoutGymInput = {
    create?: XOR<RefereeCreateWithoutGymInput, RefereeUncheckedCreateWithoutGymInput> | RefereeCreateWithoutGymInput[] | RefereeUncheckedCreateWithoutGymInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutGymInput | RefereeCreateOrConnectWithoutGymInput[]
    createMany?: RefereeCreateManyGymInputEnvelope
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
  }

  export type AthleteCreateNestedManyWithoutGymInput = {
    create?: XOR<AthleteCreateWithoutGymInput, AthleteUncheckedCreateWithoutGymInput> | AthleteCreateWithoutGymInput[] | AthleteUncheckedCreateWithoutGymInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutGymInput | AthleteCreateOrConnectWithoutGymInput[]
    createMany?: AthleteCreateManyGymInputEnvelope
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutOrganiserGymInput = {
    create?: XOR<EventCreateWithoutOrganiserGymInput, EventUncheckedCreateWithoutOrganiserGymInput> | EventCreateWithoutOrganiserGymInput[] | EventUncheckedCreateWithoutOrganiserGymInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganiserGymInput | EventCreateOrConnectWithoutOrganiserGymInput[]
    createMany?: EventCreateManyOrganiserGymInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type RefereeUncheckedCreateNestedManyWithoutGymInput = {
    create?: XOR<RefereeCreateWithoutGymInput, RefereeUncheckedCreateWithoutGymInput> | RefereeCreateWithoutGymInput[] | RefereeUncheckedCreateWithoutGymInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutGymInput | RefereeCreateOrConnectWithoutGymInput[]
    createMany?: RefereeCreateManyGymInputEnvelope
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
  }

  export type AthleteUncheckedCreateNestedManyWithoutGymInput = {
    create?: XOR<AthleteCreateWithoutGymInput, AthleteUncheckedCreateWithoutGymInput> | AthleteCreateWithoutGymInput[] | AthleteUncheckedCreateWithoutGymInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutGymInput | AthleteCreateOrConnectWithoutGymInput[]
    createMany?: AthleteCreateManyGymInputEnvelope
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
  }

  export type EventUpdateManyWithoutOrganiserGymNestedInput = {
    create?: XOR<EventCreateWithoutOrganiserGymInput, EventUncheckedCreateWithoutOrganiserGymInput> | EventCreateWithoutOrganiserGymInput[] | EventUncheckedCreateWithoutOrganiserGymInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganiserGymInput | EventCreateOrConnectWithoutOrganiserGymInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganiserGymInput | EventUpsertWithWhereUniqueWithoutOrganiserGymInput[]
    createMany?: EventCreateManyOrganiserGymInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganiserGymInput | EventUpdateWithWhereUniqueWithoutOrganiserGymInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganiserGymInput | EventUpdateManyWithWhereWithoutOrganiserGymInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type RefereeUpdateManyWithoutGymNestedInput = {
    create?: XOR<RefereeCreateWithoutGymInput, RefereeUncheckedCreateWithoutGymInput> | RefereeCreateWithoutGymInput[] | RefereeUncheckedCreateWithoutGymInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutGymInput | RefereeCreateOrConnectWithoutGymInput[]
    upsert?: RefereeUpsertWithWhereUniqueWithoutGymInput | RefereeUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: RefereeCreateManyGymInputEnvelope
    set?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    disconnect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    delete?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    update?: RefereeUpdateWithWhereUniqueWithoutGymInput | RefereeUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: RefereeUpdateManyWithWhereWithoutGymInput | RefereeUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: RefereeScalarWhereInput | RefereeScalarWhereInput[]
  }

  export type AthleteUpdateManyWithoutGymNestedInput = {
    create?: XOR<AthleteCreateWithoutGymInput, AthleteUncheckedCreateWithoutGymInput> | AthleteCreateWithoutGymInput[] | AthleteUncheckedCreateWithoutGymInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutGymInput | AthleteCreateOrConnectWithoutGymInput[]
    upsert?: AthleteUpsertWithWhereUniqueWithoutGymInput | AthleteUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: AthleteCreateManyGymInputEnvelope
    set?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    disconnect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    delete?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    update?: AthleteUpdateWithWhereUniqueWithoutGymInput | AthleteUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: AthleteUpdateManyWithWhereWithoutGymInput | AthleteUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutOrganiserGymNestedInput = {
    create?: XOR<EventCreateWithoutOrganiserGymInput, EventUncheckedCreateWithoutOrganiserGymInput> | EventCreateWithoutOrganiserGymInput[] | EventUncheckedCreateWithoutOrganiserGymInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganiserGymInput | EventCreateOrConnectWithoutOrganiserGymInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganiserGymInput | EventUpsertWithWhereUniqueWithoutOrganiserGymInput[]
    createMany?: EventCreateManyOrganiserGymInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganiserGymInput | EventUpdateWithWhereUniqueWithoutOrganiserGymInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganiserGymInput | EventUpdateManyWithWhereWithoutOrganiserGymInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type RefereeUncheckedUpdateManyWithoutGymNestedInput = {
    create?: XOR<RefereeCreateWithoutGymInput, RefereeUncheckedCreateWithoutGymInput> | RefereeCreateWithoutGymInput[] | RefereeUncheckedCreateWithoutGymInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutGymInput | RefereeCreateOrConnectWithoutGymInput[]
    upsert?: RefereeUpsertWithWhereUniqueWithoutGymInput | RefereeUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: RefereeCreateManyGymInputEnvelope
    set?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    disconnect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    delete?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    update?: RefereeUpdateWithWhereUniqueWithoutGymInput | RefereeUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: RefereeUpdateManyWithWhereWithoutGymInput | RefereeUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: RefereeScalarWhereInput | RefereeScalarWhereInput[]
  }

  export type AthleteUncheckedUpdateManyWithoutGymNestedInput = {
    create?: XOR<AthleteCreateWithoutGymInput, AthleteUncheckedCreateWithoutGymInput> | AthleteCreateWithoutGymInput[] | AthleteUncheckedCreateWithoutGymInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutGymInput | AthleteCreateOrConnectWithoutGymInput[]
    upsert?: AthleteUpsertWithWhereUniqueWithoutGymInput | AthleteUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: AthleteCreateManyGymInputEnvelope
    set?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    disconnect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    delete?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    update?: AthleteUpdateWithWhereUniqueWithoutGymInput | AthleteUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: AthleteUpdateManyWithWhereWithoutGymInput | AthleteUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
  }

  export type GymCreateNestedOneWithoutEventsInput = {
    create?: XOR<GymCreateWithoutEventsInput, GymUncheckedCreateWithoutEventsInput>
    connectOrCreate?: GymCreateOrConnectWithoutEventsInput
    connect?: GymWhereUniqueInput
  }

  export type DisciplineCreateNestedManyWithoutEventsInput = {
    create?: XOR<DisciplineCreateWithoutEventsInput, DisciplineUncheckedCreateWithoutEventsInput> | DisciplineCreateWithoutEventsInput[] | DisciplineUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutEventsInput | DisciplineCreateOrConnectWithoutEventsInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
  }

  export type RefereeCreateNestedManyWithoutEventInput = {
    create?: XOR<RefereeCreateWithoutEventInput, RefereeUncheckedCreateWithoutEventInput> | RefereeCreateWithoutEventInput[] | RefereeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutEventInput | RefereeCreateOrConnectWithoutEventInput[]
    createMany?: RefereeCreateManyEventInputEnvelope
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
  }

  export type AthleteCreateNestedManyWithoutEventInput = {
    create?: XOR<AthleteCreateWithoutEventInput, AthleteUncheckedCreateWithoutEventInput> | AthleteCreateWithoutEventInput[] | AthleteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutEventInput | AthleteCreateOrConnectWithoutEventInput[]
    createMany?: AthleteCreateManyEventInputEnvelope
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
  }

  export type ScoreCreateNestedManyWithoutEventInput = {
    create?: XOR<ScoreCreateWithoutEventInput, ScoreUncheckedCreateWithoutEventInput> | ScoreCreateWithoutEventInput[] | ScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutEventInput | ScoreCreateOrConnectWithoutEventInput[]
    createMany?: ScoreCreateManyEventInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type DisciplineUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<DisciplineCreateWithoutEventsInput, DisciplineUncheckedCreateWithoutEventsInput> | DisciplineCreateWithoutEventsInput[] | DisciplineUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutEventsInput | DisciplineCreateOrConnectWithoutEventsInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
  }

  export type RefereeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<RefereeCreateWithoutEventInput, RefereeUncheckedCreateWithoutEventInput> | RefereeCreateWithoutEventInput[] | RefereeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutEventInput | RefereeCreateOrConnectWithoutEventInput[]
    createMany?: RefereeCreateManyEventInputEnvelope
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
  }

  export type AthleteUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<AthleteCreateWithoutEventInput, AthleteUncheckedCreateWithoutEventInput> | AthleteCreateWithoutEventInput[] | AthleteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutEventInput | AthleteCreateOrConnectWithoutEventInput[]
    createMany?: AthleteCreateManyEventInputEnvelope
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ScoreCreateWithoutEventInput, ScoreUncheckedCreateWithoutEventInput> | ScoreCreateWithoutEventInput[] | ScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutEventInput | ScoreCreateOrConnectWithoutEventInput[]
    createMany?: ScoreCreateManyEventInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type GymUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<GymCreateWithoutEventsInput, GymUncheckedCreateWithoutEventsInput>
    connectOrCreate?: GymCreateOrConnectWithoutEventsInput
    upsert?: GymUpsertWithoutEventsInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutEventsInput, GymUpdateWithoutEventsInput>, GymUncheckedUpdateWithoutEventsInput>
  }

  export type DisciplineUpdateManyWithoutEventsNestedInput = {
    create?: XOR<DisciplineCreateWithoutEventsInput, DisciplineUncheckedCreateWithoutEventsInput> | DisciplineCreateWithoutEventsInput[] | DisciplineUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutEventsInput | DisciplineCreateOrConnectWithoutEventsInput[]
    upsert?: DisciplineUpsertWithWhereUniqueWithoutEventsInput | DisciplineUpsertWithWhereUniqueWithoutEventsInput[]
    set?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    disconnect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    delete?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    update?: DisciplineUpdateWithWhereUniqueWithoutEventsInput | DisciplineUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: DisciplineUpdateManyWithWhereWithoutEventsInput | DisciplineUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
  }

  export type RefereeUpdateManyWithoutEventNestedInput = {
    create?: XOR<RefereeCreateWithoutEventInput, RefereeUncheckedCreateWithoutEventInput> | RefereeCreateWithoutEventInput[] | RefereeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutEventInput | RefereeCreateOrConnectWithoutEventInput[]
    upsert?: RefereeUpsertWithWhereUniqueWithoutEventInput | RefereeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: RefereeCreateManyEventInputEnvelope
    set?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    disconnect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    delete?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    update?: RefereeUpdateWithWhereUniqueWithoutEventInput | RefereeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: RefereeUpdateManyWithWhereWithoutEventInput | RefereeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: RefereeScalarWhereInput | RefereeScalarWhereInput[]
  }

  export type AthleteUpdateManyWithoutEventNestedInput = {
    create?: XOR<AthleteCreateWithoutEventInput, AthleteUncheckedCreateWithoutEventInput> | AthleteCreateWithoutEventInput[] | AthleteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutEventInput | AthleteCreateOrConnectWithoutEventInput[]
    upsert?: AthleteUpsertWithWhereUniqueWithoutEventInput | AthleteUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AthleteCreateManyEventInputEnvelope
    set?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    disconnect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    delete?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    update?: AthleteUpdateWithWhereUniqueWithoutEventInput | AthleteUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AthleteUpdateManyWithWhereWithoutEventInput | AthleteUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
  }

  export type ScoreUpdateManyWithoutEventNestedInput = {
    create?: XOR<ScoreCreateWithoutEventInput, ScoreUncheckedCreateWithoutEventInput> | ScoreCreateWithoutEventInput[] | ScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutEventInput | ScoreCreateOrConnectWithoutEventInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutEventInput | ScoreUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ScoreCreateManyEventInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutEventInput | ScoreUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutEventInput | ScoreUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type DisciplineUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<DisciplineCreateWithoutEventsInput, DisciplineUncheckedCreateWithoutEventsInput> | DisciplineCreateWithoutEventsInput[] | DisciplineUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutEventsInput | DisciplineCreateOrConnectWithoutEventsInput[]
    upsert?: DisciplineUpsertWithWhereUniqueWithoutEventsInput | DisciplineUpsertWithWhereUniqueWithoutEventsInput[]
    set?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    disconnect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    delete?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    update?: DisciplineUpdateWithWhereUniqueWithoutEventsInput | DisciplineUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: DisciplineUpdateManyWithWhereWithoutEventsInput | DisciplineUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
  }

  export type RefereeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<RefereeCreateWithoutEventInput, RefereeUncheckedCreateWithoutEventInput> | RefereeCreateWithoutEventInput[] | RefereeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RefereeCreateOrConnectWithoutEventInput | RefereeCreateOrConnectWithoutEventInput[]
    upsert?: RefereeUpsertWithWhereUniqueWithoutEventInput | RefereeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: RefereeCreateManyEventInputEnvelope
    set?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    disconnect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    delete?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    connect?: RefereeWhereUniqueInput | RefereeWhereUniqueInput[]
    update?: RefereeUpdateWithWhereUniqueWithoutEventInput | RefereeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: RefereeUpdateManyWithWhereWithoutEventInput | RefereeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: RefereeScalarWhereInput | RefereeScalarWhereInput[]
  }

  export type AthleteUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<AthleteCreateWithoutEventInput, AthleteUncheckedCreateWithoutEventInput> | AthleteCreateWithoutEventInput[] | AthleteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AthleteCreateOrConnectWithoutEventInput | AthleteCreateOrConnectWithoutEventInput[]
    upsert?: AthleteUpsertWithWhereUniqueWithoutEventInput | AthleteUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AthleteCreateManyEventInputEnvelope
    set?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    disconnect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    delete?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    connect?: AthleteWhereUniqueInput | AthleteWhereUniqueInput[]
    update?: AthleteUpdateWithWhereUniqueWithoutEventInput | AthleteUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AthleteUpdateManyWithWhereWithoutEventInput | AthleteUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ScoreCreateWithoutEventInput, ScoreUncheckedCreateWithoutEventInput> | ScoreCreateWithoutEventInput[] | ScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutEventInput | ScoreCreateOrConnectWithoutEventInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutEventInput | ScoreUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ScoreCreateManyEventInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutEventInput | ScoreUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutEventInput | ScoreUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type GymCreateNestedOneWithoutRefereesInput = {
    create?: XOR<GymCreateWithoutRefereesInput, GymUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: GymCreateOrConnectWithoutRefereesInput
    connect?: GymWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutRefereesInput = {
    create?: XOR<EventCreateWithoutRefereesInput, EventUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: EventCreateOrConnectWithoutRefereesInput
    connect?: EventWhereUniqueInput
  }

  export type GymUpdateOneRequiredWithoutRefereesNestedInput = {
    create?: XOR<GymCreateWithoutRefereesInput, GymUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: GymCreateOrConnectWithoutRefereesInput
    upsert?: GymUpsertWithoutRefereesInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutRefereesInput, GymUpdateWithoutRefereesInput>, GymUncheckedUpdateWithoutRefereesInput>
  }

  export type EventUpdateOneRequiredWithoutRefereesNestedInput = {
    create?: XOR<EventCreateWithoutRefereesInput, EventUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: EventCreateOrConnectWithoutRefereesInput
    upsert?: EventUpsertWithoutRefereesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutRefereesInput, EventUpdateWithoutRefereesInput>, EventUncheckedUpdateWithoutRefereesInput>
  }

  export type DisciplineCreateNestedManyWithoutAthletesInput = {
    create?: XOR<DisciplineCreateWithoutAthletesInput, DisciplineUncheckedCreateWithoutAthletesInput> | DisciplineCreateWithoutAthletesInput[] | DisciplineUncheckedCreateWithoutAthletesInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutAthletesInput | DisciplineCreateOrConnectWithoutAthletesInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
  }

  export type EventCreateNestedOneWithoutAthletesInput = {
    create?: XOR<EventCreateWithoutAthletesInput, EventUncheckedCreateWithoutAthletesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAthletesInput
    connect?: EventWhereUniqueInput
  }

  export type GymCreateNestedOneWithoutAthletesInput = {
    create?: XOR<GymCreateWithoutAthletesInput, GymUncheckedCreateWithoutAthletesInput>
    connectOrCreate?: GymCreateOrConnectWithoutAthletesInput
    connect?: GymWhereUniqueInput
  }

  export type ScoreCreateNestedManyWithoutAthleteInput = {
    create?: XOR<ScoreCreateWithoutAthleteInput, ScoreUncheckedCreateWithoutAthleteInput> | ScoreCreateWithoutAthleteInput[] | ScoreUncheckedCreateWithoutAthleteInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutAthleteInput | ScoreCreateOrConnectWithoutAthleteInput[]
    createMany?: ScoreCreateManyAthleteInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type DisciplineUncheckedCreateNestedManyWithoutAthletesInput = {
    create?: XOR<DisciplineCreateWithoutAthletesInput, DisciplineUncheckedCreateWithoutAthletesInput> | DisciplineCreateWithoutAthletesInput[] | DisciplineUncheckedCreateWithoutAthletesInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutAthletesInput | DisciplineCreateOrConnectWithoutAthletesInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutAthleteInput = {
    create?: XOR<ScoreCreateWithoutAthleteInput, ScoreUncheckedCreateWithoutAthleteInput> | ScoreCreateWithoutAthleteInput[] | ScoreUncheckedCreateWithoutAthleteInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutAthleteInput | ScoreCreateOrConnectWithoutAthleteInput[]
    createMany?: ScoreCreateManyAthleteInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DisciplineUpdateManyWithoutAthletesNestedInput = {
    create?: XOR<DisciplineCreateWithoutAthletesInput, DisciplineUncheckedCreateWithoutAthletesInput> | DisciplineCreateWithoutAthletesInput[] | DisciplineUncheckedCreateWithoutAthletesInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutAthletesInput | DisciplineCreateOrConnectWithoutAthletesInput[]
    upsert?: DisciplineUpsertWithWhereUniqueWithoutAthletesInput | DisciplineUpsertWithWhereUniqueWithoutAthletesInput[]
    set?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    disconnect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    delete?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    update?: DisciplineUpdateWithWhereUniqueWithoutAthletesInput | DisciplineUpdateWithWhereUniqueWithoutAthletesInput[]
    updateMany?: DisciplineUpdateManyWithWhereWithoutAthletesInput | DisciplineUpdateManyWithWhereWithoutAthletesInput[]
    deleteMany?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
  }

  export type EventUpdateOneRequiredWithoutAthletesNestedInput = {
    create?: XOR<EventCreateWithoutAthletesInput, EventUncheckedCreateWithoutAthletesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAthletesInput
    upsert?: EventUpsertWithoutAthletesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAthletesInput, EventUpdateWithoutAthletesInput>, EventUncheckedUpdateWithoutAthletesInput>
  }

  export type GymUpdateOneRequiredWithoutAthletesNestedInput = {
    create?: XOR<GymCreateWithoutAthletesInput, GymUncheckedCreateWithoutAthletesInput>
    connectOrCreate?: GymCreateOrConnectWithoutAthletesInput
    upsert?: GymUpsertWithoutAthletesInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutAthletesInput, GymUpdateWithoutAthletesInput>, GymUncheckedUpdateWithoutAthletesInput>
  }

  export type ScoreUpdateManyWithoutAthleteNestedInput = {
    create?: XOR<ScoreCreateWithoutAthleteInput, ScoreUncheckedCreateWithoutAthleteInput> | ScoreCreateWithoutAthleteInput[] | ScoreUncheckedCreateWithoutAthleteInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutAthleteInput | ScoreCreateOrConnectWithoutAthleteInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutAthleteInput | ScoreUpsertWithWhereUniqueWithoutAthleteInput[]
    createMany?: ScoreCreateManyAthleteInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutAthleteInput | ScoreUpdateWithWhereUniqueWithoutAthleteInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutAthleteInput | ScoreUpdateManyWithWhereWithoutAthleteInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type DisciplineUncheckedUpdateManyWithoutAthletesNestedInput = {
    create?: XOR<DisciplineCreateWithoutAthletesInput, DisciplineUncheckedCreateWithoutAthletesInput> | DisciplineCreateWithoutAthletesInput[] | DisciplineUncheckedCreateWithoutAthletesInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutAthletesInput | DisciplineCreateOrConnectWithoutAthletesInput[]
    upsert?: DisciplineUpsertWithWhereUniqueWithoutAthletesInput | DisciplineUpsertWithWhereUniqueWithoutAthletesInput[]
    set?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    disconnect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    delete?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    update?: DisciplineUpdateWithWhereUniqueWithoutAthletesInput | DisciplineUpdateWithWhereUniqueWithoutAthletesInput[]
    updateMany?: DisciplineUpdateManyWithWhereWithoutAthletesInput | DisciplineUpdateManyWithWhereWithoutAthletesInput[]
    deleteMany?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutAthleteNestedInput = {
    create?: XOR<ScoreCreateWithoutAthleteInput, ScoreUncheckedCreateWithoutAthleteInput> | ScoreCreateWithoutAthleteInput[] | ScoreUncheckedCreateWithoutAthleteInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutAthleteInput | ScoreCreateOrConnectWithoutAthleteInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutAthleteInput | ScoreUpsertWithWhereUniqueWithoutAthleteInput[]
    createMany?: ScoreCreateManyAthleteInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutAthleteInput | ScoreUpdateWithWhereUniqueWithoutAthleteInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutAthleteInput | ScoreUpdateManyWithWhereWithoutAthleteInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type AthleteCreateNestedOneWithoutScoresInput = {
    create?: XOR<AthleteCreateWithoutScoresInput, AthleteUncheckedCreateWithoutScoresInput>
    connectOrCreate?: AthleteCreateOrConnectWithoutScoresInput
    connect?: AthleteWhereUniqueInput
  }

  export type DisciplineCreateNestedOneWithoutScoresInput = {
    create?: XOR<DisciplineCreateWithoutScoresInput, DisciplineUncheckedCreateWithoutScoresInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutScoresInput
    connect?: DisciplineWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutScoresInput = {
    create?: XOR<EventCreateWithoutScoresInput, EventUncheckedCreateWithoutScoresInput>
    connectOrCreate?: EventCreateOrConnectWithoutScoresInput
    connect?: EventWhereUniqueInput
  }

  export type AthleteUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<AthleteCreateWithoutScoresInput, AthleteUncheckedCreateWithoutScoresInput>
    connectOrCreate?: AthleteCreateOrConnectWithoutScoresInput
    upsert?: AthleteUpsertWithoutScoresInput
    connect?: AthleteWhereUniqueInput
    update?: XOR<XOR<AthleteUpdateToOneWithWhereWithoutScoresInput, AthleteUpdateWithoutScoresInput>, AthleteUncheckedUpdateWithoutScoresInput>
  }

  export type DisciplineUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<DisciplineCreateWithoutScoresInput, DisciplineUncheckedCreateWithoutScoresInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutScoresInput
    upsert?: DisciplineUpsertWithoutScoresInput
    connect?: DisciplineWhereUniqueInput
    update?: XOR<XOR<DisciplineUpdateToOneWithWhereWithoutScoresInput, DisciplineUpdateWithoutScoresInput>, DisciplineUncheckedUpdateWithoutScoresInput>
  }

  export type EventUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<EventCreateWithoutScoresInput, EventUncheckedCreateWithoutScoresInput>
    connectOrCreate?: EventCreateOrConnectWithoutScoresInput
    upsert?: EventUpsertWithoutScoresInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutScoresInput, EventUpdateWithoutScoresInput>, EventUncheckedUpdateWithoutScoresInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ScoreCreateWithoutDisciplineInput = {
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
    athlete: AthleteCreateNestedOneWithoutScoresInput
    event: EventCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateWithoutDisciplineInput = {
    id?: number
    athleteId: number
    eventId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type ScoreCreateOrConnectWithoutDisciplineInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutDisciplineInput, ScoreUncheckedCreateWithoutDisciplineInput>
  }

  export type ScoreCreateManyDisciplineInputEnvelope = {
    data: ScoreCreateManyDisciplineInput | ScoreCreateManyDisciplineInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutDisciplinesInput = {
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
    organiserGym: GymCreateNestedOneWithoutEventsInput
    referees?: RefereeCreateNestedManyWithoutEventInput
    athletes?: AthleteCreateNestedManyWithoutEventInput
    scores?: ScoreCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutDisciplinesInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    organiserGymId: number
    createdAt?: Date | string
    referees?: RefereeUncheckedCreateNestedManyWithoutEventInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutEventInput
    scores?: ScoreUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutDisciplinesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutDisciplinesInput, EventUncheckedCreateWithoutDisciplinesInput>
  }

  export type AthleteCreateWithoutDisciplinesInput = {
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutAthletesInput
    gym: GymCreateNestedOneWithoutAthletesInput
    scores?: ScoreCreateNestedManyWithoutAthleteInput
  }

  export type AthleteUncheckedCreateWithoutDisciplinesInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    eventId: number
    gymId: number
    createdAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutAthleteInput
  }

  export type AthleteCreateOrConnectWithoutDisciplinesInput = {
    where: AthleteWhereUniqueInput
    create: XOR<AthleteCreateWithoutDisciplinesInput, AthleteUncheckedCreateWithoutDisciplinesInput>
  }

  export type ScoreUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutDisciplineInput, ScoreUncheckedUpdateWithoutDisciplineInput>
    create: XOR<ScoreCreateWithoutDisciplineInput, ScoreUncheckedCreateWithoutDisciplineInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutDisciplineInput, ScoreUncheckedUpdateWithoutDisciplineInput>
  }

  export type ScoreUpdateManyWithWhereWithoutDisciplineInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutDisciplineInput>
  }

  export type ScoreScalarWhereInput = {
    AND?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
    OR?: ScoreScalarWhereInput[]
    NOT?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
    id?: IntFilter<"Score"> | number
    athleteId?: IntFilter<"Score"> | number
    disciplineId?: IntFilter<"Score"> | number
    eventId?: IntFilter<"Score"> | number
    trial1?: FloatFilter<"Score"> | number
    trial2?: FloatFilter<"Score"> | number
    trial3?: FloatFilter<"Score"> | number
    maxLift?: FloatFilter<"Score"> | number
    createdAt?: DateTimeFilter<"Score"> | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutDisciplinesInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutDisciplinesInput, EventUncheckedUpdateWithoutDisciplinesInput>
    create: XOR<EventCreateWithoutDisciplinesInput, EventUncheckedCreateWithoutDisciplinesInput>
  }

  export type EventUpdateWithWhereUniqueWithoutDisciplinesInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutDisciplinesInput, EventUncheckedUpdateWithoutDisciplinesInput>
  }

  export type EventUpdateManyWithWhereWithoutDisciplinesInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutDisciplinesInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    location?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    time?: StringFilter<"Event"> | string
    organiserGymId?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type AthleteUpsertWithWhereUniqueWithoutDisciplinesInput = {
    where: AthleteWhereUniqueInput
    update: XOR<AthleteUpdateWithoutDisciplinesInput, AthleteUncheckedUpdateWithoutDisciplinesInput>
    create: XOR<AthleteCreateWithoutDisciplinesInput, AthleteUncheckedCreateWithoutDisciplinesInput>
  }

  export type AthleteUpdateWithWhereUniqueWithoutDisciplinesInput = {
    where: AthleteWhereUniqueInput
    data: XOR<AthleteUpdateWithoutDisciplinesInput, AthleteUncheckedUpdateWithoutDisciplinesInput>
  }

  export type AthleteUpdateManyWithWhereWithoutDisciplinesInput = {
    where: AthleteScalarWhereInput
    data: XOR<AthleteUpdateManyMutationInput, AthleteUncheckedUpdateManyWithoutDisciplinesInput>
  }

  export type AthleteScalarWhereInput = {
    AND?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
    OR?: AthleteScalarWhereInput[]
    NOT?: AthleteScalarWhereInput | AthleteScalarWhereInput[]
    id?: IntFilter<"Athlete"> | number
    name?: StringFilter<"Athlete"> | string
    dob?: DateTimeFilter<"Athlete"> | Date | string
    age?: IntFilter<"Athlete"> | number
    gender?: StringFilter<"Athlete"> | string
    weight?: FloatFilter<"Athlete"> | number
    weightCategory?: StringFilter<"Athlete"> | string
    category?: StringFilter<"Athlete"> | string
    aadharNumber?: StringFilter<"Athlete"> | string
    mobile?: StringFilter<"Athlete"> | string
    photoUrl?: StringFilter<"Athlete"> | string
    aadharUrl?: StringFilter<"Athlete"> | string
    eventId?: IntFilter<"Athlete"> | number
    gymId?: IntFilter<"Athlete"> | number
    createdAt?: DateTimeFilter<"Athlete"> | Date | string
  }

  export type EventCreateWithoutOrganiserGymInput = {
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
    disciplines?: DisciplineCreateNestedManyWithoutEventsInput
    referees?: RefereeCreateNestedManyWithoutEventInput
    athletes?: AthleteCreateNestedManyWithoutEventInput
    scores?: ScoreCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutOrganiserGymInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutEventsInput
    referees?: RefereeUncheckedCreateNestedManyWithoutEventInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutEventInput
    scores?: ScoreUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutOrganiserGymInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutOrganiserGymInput, EventUncheckedCreateWithoutOrganiserGymInput>
  }

  export type EventCreateManyOrganiserGymInputEnvelope = {
    data: EventCreateManyOrganiserGymInput | EventCreateManyOrganiserGymInput[]
    skipDuplicates?: boolean
  }

  export type RefereeCreateWithoutGymInput = {
    name: string
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutRefereesInput
  }

  export type RefereeUncheckedCreateWithoutGymInput = {
    id?: number
    name: string
    eventId: number
    createdAt?: Date | string
  }

  export type RefereeCreateOrConnectWithoutGymInput = {
    where: RefereeWhereUniqueInput
    create: XOR<RefereeCreateWithoutGymInput, RefereeUncheckedCreateWithoutGymInput>
  }

  export type RefereeCreateManyGymInputEnvelope = {
    data: RefereeCreateManyGymInput | RefereeCreateManyGymInput[]
    skipDuplicates?: boolean
  }

  export type AthleteCreateWithoutGymInput = {
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    createdAt?: Date | string
    disciplines?: DisciplineCreateNestedManyWithoutAthletesInput
    event: EventCreateNestedOneWithoutAthletesInput
    scores?: ScoreCreateNestedManyWithoutAthleteInput
  }

  export type AthleteUncheckedCreateWithoutGymInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    eventId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutAthletesInput
    scores?: ScoreUncheckedCreateNestedManyWithoutAthleteInput
  }

  export type AthleteCreateOrConnectWithoutGymInput = {
    where: AthleteWhereUniqueInput
    create: XOR<AthleteCreateWithoutGymInput, AthleteUncheckedCreateWithoutGymInput>
  }

  export type AthleteCreateManyGymInputEnvelope = {
    data: AthleteCreateManyGymInput | AthleteCreateManyGymInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutOrganiserGymInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutOrganiserGymInput, EventUncheckedUpdateWithoutOrganiserGymInput>
    create: XOR<EventCreateWithoutOrganiserGymInput, EventUncheckedCreateWithoutOrganiserGymInput>
  }

  export type EventUpdateWithWhereUniqueWithoutOrganiserGymInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutOrganiserGymInput, EventUncheckedUpdateWithoutOrganiserGymInput>
  }

  export type EventUpdateManyWithWhereWithoutOrganiserGymInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutOrganiserGymInput>
  }

  export type RefereeUpsertWithWhereUniqueWithoutGymInput = {
    where: RefereeWhereUniqueInput
    update: XOR<RefereeUpdateWithoutGymInput, RefereeUncheckedUpdateWithoutGymInput>
    create: XOR<RefereeCreateWithoutGymInput, RefereeUncheckedCreateWithoutGymInput>
  }

  export type RefereeUpdateWithWhereUniqueWithoutGymInput = {
    where: RefereeWhereUniqueInput
    data: XOR<RefereeUpdateWithoutGymInput, RefereeUncheckedUpdateWithoutGymInput>
  }

  export type RefereeUpdateManyWithWhereWithoutGymInput = {
    where: RefereeScalarWhereInput
    data: XOR<RefereeUpdateManyMutationInput, RefereeUncheckedUpdateManyWithoutGymInput>
  }

  export type RefereeScalarWhereInput = {
    AND?: RefereeScalarWhereInput | RefereeScalarWhereInput[]
    OR?: RefereeScalarWhereInput[]
    NOT?: RefereeScalarWhereInput | RefereeScalarWhereInput[]
    id?: IntFilter<"Referee"> | number
    name?: StringFilter<"Referee"> | string
    gymId?: IntFilter<"Referee"> | number
    eventId?: IntFilter<"Referee"> | number
    createdAt?: DateTimeFilter<"Referee"> | Date | string
  }

  export type AthleteUpsertWithWhereUniqueWithoutGymInput = {
    where: AthleteWhereUniqueInput
    update: XOR<AthleteUpdateWithoutGymInput, AthleteUncheckedUpdateWithoutGymInput>
    create: XOR<AthleteCreateWithoutGymInput, AthleteUncheckedCreateWithoutGymInput>
  }

  export type AthleteUpdateWithWhereUniqueWithoutGymInput = {
    where: AthleteWhereUniqueInput
    data: XOR<AthleteUpdateWithoutGymInput, AthleteUncheckedUpdateWithoutGymInput>
  }

  export type AthleteUpdateManyWithWhereWithoutGymInput = {
    where: AthleteScalarWhereInput
    data: XOR<AthleteUpdateManyMutationInput, AthleteUncheckedUpdateManyWithoutGymInput>
  }

  export type GymCreateWithoutEventsInput = {
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    referees?: RefereeCreateNestedManyWithoutGymInput
    athletes?: AthleteCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutEventsInput = {
    id?: number
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    referees?: RefereeUncheckedCreateNestedManyWithoutGymInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutEventsInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutEventsInput, GymUncheckedCreateWithoutEventsInput>
  }

  export type DisciplineCreateWithoutEventsInput = {
    name: string
    createdAt?: Date | string
    scores?: ScoreCreateNestedManyWithoutDisciplineInput
    athletes?: AthleteCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineUncheckedCreateWithoutEventsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutDisciplineInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineCreateOrConnectWithoutEventsInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutEventsInput, DisciplineUncheckedCreateWithoutEventsInput>
  }

  export type RefereeCreateWithoutEventInput = {
    name: string
    createdAt?: Date | string
    gym: GymCreateNestedOneWithoutRefereesInput
  }

  export type RefereeUncheckedCreateWithoutEventInput = {
    id?: number
    name: string
    gymId: number
    createdAt?: Date | string
  }

  export type RefereeCreateOrConnectWithoutEventInput = {
    where: RefereeWhereUniqueInput
    create: XOR<RefereeCreateWithoutEventInput, RefereeUncheckedCreateWithoutEventInput>
  }

  export type RefereeCreateManyEventInputEnvelope = {
    data: RefereeCreateManyEventInput | RefereeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type AthleteCreateWithoutEventInput = {
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    createdAt?: Date | string
    disciplines?: DisciplineCreateNestedManyWithoutAthletesInput
    gym: GymCreateNestedOneWithoutAthletesInput
    scores?: ScoreCreateNestedManyWithoutAthleteInput
  }

  export type AthleteUncheckedCreateWithoutEventInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    gymId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutAthletesInput
    scores?: ScoreUncheckedCreateNestedManyWithoutAthleteInput
  }

  export type AthleteCreateOrConnectWithoutEventInput = {
    where: AthleteWhereUniqueInput
    create: XOR<AthleteCreateWithoutEventInput, AthleteUncheckedCreateWithoutEventInput>
  }

  export type AthleteCreateManyEventInputEnvelope = {
    data: AthleteCreateManyEventInput | AthleteCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCreateWithoutEventInput = {
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
    athlete: AthleteCreateNestedOneWithoutScoresInput
    discipline: DisciplineCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateWithoutEventInput = {
    id?: number
    athleteId: number
    disciplineId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type ScoreCreateOrConnectWithoutEventInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutEventInput, ScoreUncheckedCreateWithoutEventInput>
  }

  export type ScoreCreateManyEventInputEnvelope = {
    data: ScoreCreateManyEventInput | ScoreCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type GymUpsertWithoutEventsInput = {
    update: XOR<GymUpdateWithoutEventsInput, GymUncheckedUpdateWithoutEventsInput>
    create: XOR<GymCreateWithoutEventsInput, GymUncheckedCreateWithoutEventsInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutEventsInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutEventsInput, GymUncheckedUpdateWithoutEventsInput>
  }

  export type GymUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referees?: RefereeUpdateManyWithoutGymNestedInput
    athletes?: AthleteUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referees?: RefereeUncheckedUpdateManyWithoutGymNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutGymNestedInput
  }

  export type DisciplineUpsertWithWhereUniqueWithoutEventsInput = {
    where: DisciplineWhereUniqueInput
    update: XOR<DisciplineUpdateWithoutEventsInput, DisciplineUncheckedUpdateWithoutEventsInput>
    create: XOR<DisciplineCreateWithoutEventsInput, DisciplineUncheckedCreateWithoutEventsInput>
  }

  export type DisciplineUpdateWithWhereUniqueWithoutEventsInput = {
    where: DisciplineWhereUniqueInput
    data: XOR<DisciplineUpdateWithoutEventsInput, DisciplineUncheckedUpdateWithoutEventsInput>
  }

  export type DisciplineUpdateManyWithWhereWithoutEventsInput = {
    where: DisciplineScalarWhereInput
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyWithoutEventsInput>
  }

  export type DisciplineScalarWhereInput = {
    AND?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
    OR?: DisciplineScalarWhereInput[]
    NOT?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
    id?: IntFilter<"Discipline"> | number
    name?: StringFilter<"Discipline"> | string
    createdAt?: DateTimeFilter<"Discipline"> | Date | string
  }

  export type RefereeUpsertWithWhereUniqueWithoutEventInput = {
    where: RefereeWhereUniqueInput
    update: XOR<RefereeUpdateWithoutEventInput, RefereeUncheckedUpdateWithoutEventInput>
    create: XOR<RefereeCreateWithoutEventInput, RefereeUncheckedCreateWithoutEventInput>
  }

  export type RefereeUpdateWithWhereUniqueWithoutEventInput = {
    where: RefereeWhereUniqueInput
    data: XOR<RefereeUpdateWithoutEventInput, RefereeUncheckedUpdateWithoutEventInput>
  }

  export type RefereeUpdateManyWithWhereWithoutEventInput = {
    where: RefereeScalarWhereInput
    data: XOR<RefereeUpdateManyMutationInput, RefereeUncheckedUpdateManyWithoutEventInput>
  }

  export type AthleteUpsertWithWhereUniqueWithoutEventInput = {
    where: AthleteWhereUniqueInput
    update: XOR<AthleteUpdateWithoutEventInput, AthleteUncheckedUpdateWithoutEventInput>
    create: XOR<AthleteCreateWithoutEventInput, AthleteUncheckedCreateWithoutEventInput>
  }

  export type AthleteUpdateWithWhereUniqueWithoutEventInput = {
    where: AthleteWhereUniqueInput
    data: XOR<AthleteUpdateWithoutEventInput, AthleteUncheckedUpdateWithoutEventInput>
  }

  export type AthleteUpdateManyWithWhereWithoutEventInput = {
    where: AthleteScalarWhereInput
    data: XOR<AthleteUpdateManyMutationInput, AthleteUncheckedUpdateManyWithoutEventInput>
  }

  export type ScoreUpsertWithWhereUniqueWithoutEventInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutEventInput, ScoreUncheckedUpdateWithoutEventInput>
    create: XOR<ScoreCreateWithoutEventInput, ScoreUncheckedCreateWithoutEventInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutEventInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutEventInput, ScoreUncheckedUpdateWithoutEventInput>
  }

  export type ScoreUpdateManyWithWhereWithoutEventInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutEventInput>
  }

  export type GymCreateWithoutRefereesInput = {
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutOrganiserGymInput
    athletes?: AthleteCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutRefereesInput = {
    id?: number
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutOrganiserGymInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutRefereesInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutRefereesInput, GymUncheckedCreateWithoutRefereesInput>
  }

  export type EventCreateWithoutRefereesInput = {
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
    organiserGym: GymCreateNestedOneWithoutEventsInput
    disciplines?: DisciplineCreateNestedManyWithoutEventsInput
    athletes?: AthleteCreateNestedManyWithoutEventInput
    scores?: ScoreCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutRefereesInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    organiserGymId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutEventsInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutEventInput
    scores?: ScoreUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutRefereesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutRefereesInput, EventUncheckedCreateWithoutRefereesInput>
  }

  export type GymUpsertWithoutRefereesInput = {
    update: XOR<GymUpdateWithoutRefereesInput, GymUncheckedUpdateWithoutRefereesInput>
    create: XOR<GymCreateWithoutRefereesInput, GymUncheckedCreateWithoutRefereesInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutRefereesInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutRefereesInput, GymUncheckedUpdateWithoutRefereesInput>
  }

  export type GymUpdateWithoutRefereesInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutOrganiserGymNestedInput
    athletes?: AthleteUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutRefereesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutOrganiserGymNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutGymNestedInput
  }

  export type EventUpsertWithoutRefereesInput = {
    update: XOR<EventUpdateWithoutRefereesInput, EventUncheckedUpdateWithoutRefereesInput>
    create: XOR<EventCreateWithoutRefereesInput, EventUncheckedCreateWithoutRefereesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutRefereesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutRefereesInput, EventUncheckedUpdateWithoutRefereesInput>
  }

  export type EventUpdateWithoutRefereesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organiserGym?: GymUpdateOneRequiredWithoutEventsNestedInput
    disciplines?: DisciplineUpdateManyWithoutEventsNestedInput
    athletes?: AthleteUpdateManyWithoutEventNestedInput
    scores?: ScoreUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutRefereesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    organiserGymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutEventsNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutEventNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutEventNestedInput
  }

  export type DisciplineCreateWithoutAthletesInput = {
    name: string
    createdAt?: Date | string
    scores?: ScoreCreateNestedManyWithoutDisciplineInput
    events?: EventCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineUncheckedCreateWithoutAthletesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutDisciplineInput
    events?: EventUncheckedCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineCreateOrConnectWithoutAthletesInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutAthletesInput, DisciplineUncheckedCreateWithoutAthletesInput>
  }

  export type EventCreateWithoutAthletesInput = {
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
    organiserGym: GymCreateNestedOneWithoutEventsInput
    disciplines?: DisciplineCreateNestedManyWithoutEventsInput
    referees?: RefereeCreateNestedManyWithoutEventInput
    scores?: ScoreCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAthletesInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    organiserGymId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutEventsInput
    referees?: RefereeUncheckedCreateNestedManyWithoutEventInput
    scores?: ScoreUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAthletesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAthletesInput, EventUncheckedCreateWithoutAthletesInput>
  }

  export type GymCreateWithoutAthletesInput = {
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutOrganiserGymInput
    referees?: RefereeCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutAthletesInput = {
    id?: number
    name: string
    ownerName: string
    coachName: string
    address: string
    pincode: string
    phone: string
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutOrganiserGymInput
    referees?: RefereeUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutAthletesInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutAthletesInput, GymUncheckedCreateWithoutAthletesInput>
  }

  export type ScoreCreateWithoutAthleteInput = {
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
    discipline: DisciplineCreateNestedOneWithoutScoresInput
    event: EventCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateWithoutAthleteInput = {
    id?: number
    disciplineId: number
    eventId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type ScoreCreateOrConnectWithoutAthleteInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutAthleteInput, ScoreUncheckedCreateWithoutAthleteInput>
  }

  export type ScoreCreateManyAthleteInputEnvelope = {
    data: ScoreCreateManyAthleteInput | ScoreCreateManyAthleteInput[]
    skipDuplicates?: boolean
  }

  export type DisciplineUpsertWithWhereUniqueWithoutAthletesInput = {
    where: DisciplineWhereUniqueInput
    update: XOR<DisciplineUpdateWithoutAthletesInput, DisciplineUncheckedUpdateWithoutAthletesInput>
    create: XOR<DisciplineCreateWithoutAthletesInput, DisciplineUncheckedCreateWithoutAthletesInput>
  }

  export type DisciplineUpdateWithWhereUniqueWithoutAthletesInput = {
    where: DisciplineWhereUniqueInput
    data: XOR<DisciplineUpdateWithoutAthletesInput, DisciplineUncheckedUpdateWithoutAthletesInput>
  }

  export type DisciplineUpdateManyWithWhereWithoutAthletesInput = {
    where: DisciplineScalarWhereInput
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyWithoutAthletesInput>
  }

  export type EventUpsertWithoutAthletesInput = {
    update: XOR<EventUpdateWithoutAthletesInput, EventUncheckedUpdateWithoutAthletesInput>
    create: XOR<EventCreateWithoutAthletesInput, EventUncheckedCreateWithoutAthletesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAthletesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAthletesInput, EventUncheckedUpdateWithoutAthletesInput>
  }

  export type EventUpdateWithoutAthletesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organiserGym?: GymUpdateOneRequiredWithoutEventsNestedInput
    disciplines?: DisciplineUpdateManyWithoutEventsNestedInput
    referees?: RefereeUpdateManyWithoutEventNestedInput
    scores?: ScoreUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAthletesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    organiserGymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutEventsNestedInput
    referees?: RefereeUncheckedUpdateManyWithoutEventNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutEventNestedInput
  }

  export type GymUpsertWithoutAthletesInput = {
    update: XOR<GymUpdateWithoutAthletesInput, GymUncheckedUpdateWithoutAthletesInput>
    create: XOR<GymCreateWithoutAthletesInput, GymUncheckedCreateWithoutAthletesInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutAthletesInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutAthletesInput, GymUncheckedUpdateWithoutAthletesInput>
  }

  export type GymUpdateWithoutAthletesInput = {
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutOrganiserGymNestedInput
    referees?: RefereeUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutAthletesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    coachName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutOrganiserGymNestedInput
    referees?: RefereeUncheckedUpdateManyWithoutGymNestedInput
  }

  export type ScoreUpsertWithWhereUniqueWithoutAthleteInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutAthleteInput, ScoreUncheckedUpdateWithoutAthleteInput>
    create: XOR<ScoreCreateWithoutAthleteInput, ScoreUncheckedCreateWithoutAthleteInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutAthleteInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutAthleteInput, ScoreUncheckedUpdateWithoutAthleteInput>
  }

  export type ScoreUpdateManyWithWhereWithoutAthleteInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutAthleteInput>
  }

  export type AthleteCreateWithoutScoresInput = {
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    createdAt?: Date | string
    disciplines?: DisciplineCreateNestedManyWithoutAthletesInput
    event: EventCreateNestedOneWithoutAthletesInput
    gym: GymCreateNestedOneWithoutAthletesInput
  }

  export type AthleteUncheckedCreateWithoutScoresInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    eventId: number
    gymId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutAthletesInput
  }

  export type AthleteCreateOrConnectWithoutScoresInput = {
    where: AthleteWhereUniqueInput
    create: XOR<AthleteCreateWithoutScoresInput, AthleteUncheckedCreateWithoutScoresInput>
  }

  export type DisciplineCreateWithoutScoresInput = {
    name: string
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutDisciplinesInput
    athletes?: AthleteCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineUncheckedCreateWithoutScoresInput = {
    id?: number
    name: string
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutDisciplinesInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutDisciplinesInput
  }

  export type DisciplineCreateOrConnectWithoutScoresInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutScoresInput, DisciplineUncheckedCreateWithoutScoresInput>
  }

  export type EventCreateWithoutScoresInput = {
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
    organiserGym: GymCreateNestedOneWithoutEventsInput
    disciplines?: DisciplineCreateNestedManyWithoutEventsInput
    referees?: RefereeCreateNestedManyWithoutEventInput
    athletes?: AthleteCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutScoresInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    organiserGymId: number
    createdAt?: Date | string
    disciplines?: DisciplineUncheckedCreateNestedManyWithoutEventsInput
    referees?: RefereeUncheckedCreateNestedManyWithoutEventInput
    athletes?: AthleteUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutScoresInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutScoresInput, EventUncheckedCreateWithoutScoresInput>
  }

  export type AthleteUpsertWithoutScoresInput = {
    update: XOR<AthleteUpdateWithoutScoresInput, AthleteUncheckedUpdateWithoutScoresInput>
    create: XOR<AthleteCreateWithoutScoresInput, AthleteUncheckedCreateWithoutScoresInput>
    where?: AthleteWhereInput
  }

  export type AthleteUpdateToOneWithWhereWithoutScoresInput = {
    where?: AthleteWhereInput
    data: XOR<AthleteUpdateWithoutScoresInput, AthleteUncheckedUpdateWithoutScoresInput>
  }

  export type AthleteUpdateWithoutScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUpdateManyWithoutAthletesNestedInput
    event?: EventUpdateOneRequiredWithoutAthletesNestedInput
    gym?: GymUpdateOneRequiredWithoutAthletesNestedInput
  }

  export type AthleteUncheckedUpdateWithoutScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutAthletesNestedInput
  }

  export type DisciplineUpsertWithoutScoresInput = {
    update: XOR<DisciplineUpdateWithoutScoresInput, DisciplineUncheckedUpdateWithoutScoresInput>
    create: XOR<DisciplineCreateWithoutScoresInput, DisciplineUncheckedCreateWithoutScoresInput>
    where?: DisciplineWhereInput
  }

  export type DisciplineUpdateToOneWithWhereWithoutScoresInput = {
    where?: DisciplineWhereInput
    data: XOR<DisciplineUpdateWithoutScoresInput, DisciplineUncheckedUpdateWithoutScoresInput>
  }

  export type DisciplineUpdateWithoutScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutDisciplinesNestedInput
    athletes?: AthleteUpdateManyWithoutDisciplinesNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutDisciplinesNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutDisciplinesNestedInput
  }

  export type EventUpsertWithoutScoresInput = {
    update: XOR<EventUpdateWithoutScoresInput, EventUncheckedUpdateWithoutScoresInput>
    create: XOR<EventCreateWithoutScoresInput, EventUncheckedCreateWithoutScoresInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutScoresInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutScoresInput, EventUncheckedUpdateWithoutScoresInput>
  }

  export type EventUpdateWithoutScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organiserGym?: GymUpdateOneRequiredWithoutEventsNestedInput
    disciplines?: DisciplineUpdateManyWithoutEventsNestedInput
    referees?: RefereeUpdateManyWithoutEventNestedInput
    athletes?: AthleteUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    organiserGymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutEventsNestedInput
    referees?: RefereeUncheckedUpdateManyWithoutEventNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ScoreCreateManyDisciplineInput = {
    id?: number
    athleteId: number
    eventId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type ScoreUpdateWithoutDisciplineInput = {
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    athlete?: AthleteUpdateOneRequiredWithoutScoresNestedInput
    event?: EventUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateWithoutDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    athleteId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUncheckedUpdateManyWithoutDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    athleteId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutDisciplinesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organiserGym?: GymUpdateOneRequiredWithoutEventsNestedInput
    referees?: RefereeUpdateManyWithoutEventNestedInput
    athletes?: AthleteUpdateManyWithoutEventNestedInput
    scores?: ScoreUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    organiserGymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referees?: RefereeUncheckedUpdateManyWithoutEventNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutEventNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    organiserGymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AthleteUpdateWithoutDisciplinesInput = {
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAthletesNestedInput
    gym?: GymUpdateOneRequiredWithoutAthletesNestedInput
    scores?: ScoreUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteUncheckedUpdateWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteUncheckedUpdateManyWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyOrganiserGymInput = {
    id?: number
    name: string
    location: string
    date: Date | string
    time: string
    createdAt?: Date | string
  }

  export type RefereeCreateManyGymInput = {
    id?: number
    name: string
    eventId: number
    createdAt?: Date | string
  }

  export type AthleteCreateManyGymInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    eventId: number
    createdAt?: Date | string
  }

  export type EventUpdateWithoutOrganiserGymInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUpdateManyWithoutEventsNestedInput
    referees?: RefereeUpdateManyWithoutEventNestedInput
    athletes?: AthleteUpdateManyWithoutEventNestedInput
    scores?: ScoreUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutOrganiserGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutEventsNestedInput
    referees?: RefereeUncheckedUpdateManyWithoutEventNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutEventNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutOrganiserGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeUpdateWithoutGymInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutRefereesNestedInput
  }

  export type RefereeUncheckedUpdateWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeUncheckedUpdateManyWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AthleteUpdateWithoutGymInput = {
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUpdateManyWithoutAthletesNestedInput
    event?: EventUpdateOneRequiredWithoutAthletesNestedInput
    scores?: ScoreUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteUncheckedUpdateWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutAthletesNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteUncheckedUpdateManyWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeCreateManyEventInput = {
    id?: number
    name: string
    gymId: number
    createdAt?: Date | string
  }

  export type AthleteCreateManyEventInput = {
    id?: number
    name: string
    dob: Date | string
    age: number
    gender: string
    weight: number
    weightCategory: string
    category: string
    aadharNumber: string
    mobile: string
    photoUrl: string
    aadharUrl: string
    gymId: number
    createdAt?: Date | string
  }

  export type ScoreCreateManyEventInput = {
    id?: number
    athleteId: number
    disciplineId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type DisciplineUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUpdateManyWithoutDisciplineNestedInput
    athletes?: AthleteUpdateManyWithoutDisciplinesNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutDisciplineNestedInput
    athletes?: AthleteUncheckedUpdateManyWithoutDisciplinesNestedInput
  }

  export type DisciplineUncheckedUpdateManyWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeUpdateWithoutEventInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gym?: GymUpdateOneRequiredWithoutRefereesNestedInput
  }

  export type RefereeUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefereeUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AthleteUpdateWithoutEventInput = {
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUpdateManyWithoutAthletesNestedInput
    gym?: GymUpdateOneRequiredWithoutAthletesNestedInput
    scores?: ScoreUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disciplines?: DisciplineUncheckedUpdateManyWithoutAthletesNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutAthleteNestedInput
  }

  export type AthleteUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    weightCategory?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    aadharNumber?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    aadharUrl?: StringFieldUpdateOperationsInput | string
    gymId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUpdateWithoutEventInput = {
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    athlete?: AthleteUpdateOneRequiredWithoutScoresNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    athleteId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    athleteId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCreateManyAthleteInput = {
    id?: number
    disciplineId: number
    eventId: number
    trial1?: number
    trial2?: number
    trial3?: number
    maxLift?: number
    createdAt?: Date | string
  }

  export type DisciplineUpdateWithoutAthletesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUpdateManyWithoutDisciplineNestedInput
    events?: EventUpdateManyWithoutDisciplinesNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutAthletesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutDisciplineNestedInput
    events?: EventUncheckedUpdateManyWithoutDisciplinesNestedInput
  }

  export type DisciplineUncheckedUpdateManyWithoutAthletesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUpdateWithoutAthleteInput = {
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discipline?: DisciplineUpdateOneRequiredWithoutScoresNestedInput
    event?: EventUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateWithoutAthleteInput = {
    id?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUncheckedUpdateManyWithoutAthleteInput = {
    id?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    trial1?: FloatFieldUpdateOperationsInput | number
    trial2?: FloatFieldUpdateOperationsInput | number
    trial3?: FloatFieldUpdateOperationsInput | number
    maxLift?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use DisciplineCountOutputTypeDefaultArgs instead
     */
    export type DisciplineCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisciplineCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymCountOutputTypeDefaultArgs instead
     */
    export type GymCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AthleteCountOutputTypeDefaultArgs instead
     */
    export type AthleteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AthleteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisciplineDefaultArgs instead
     */
    export type DisciplineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisciplineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymDefaultArgs instead
     */
    export type GymArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefereeDefaultArgs instead
     */
    export type RefereeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefereeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AthleteDefaultArgs instead
     */
    export type AthleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AthleteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScoreDefaultArgs instead
     */
    export type ScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScoreDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}